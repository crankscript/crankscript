{
    "globalStatements": [
        "/// <reference types=\"lua-types/5.4\" />",
        "// noinspection JSUnusedGlobalSymbols,JSDuplicatedDeclaration,ReservedWordAsName",
        "\n/**\n * This TypeScript declaration file (`d.ts`) was automatically generated using documentation from the Playdate SDK,\n * specifically from \"Inside Playdate\" and \"Inside Playdate with C\".\n *\n * The documentation excerpts are owned by Panic Inc. and are provided here solely for reference within the context of\n * Playdate game development. I do not claim ownership of any part of the documentation.\n *\n * If you are using this file, you must also comply with the Playdate SDK license, available at\n * https://play.date/dev/sdk-license/.\n */\n"
    ],
    "constants": {
        "playdate": [
            "kButtonA",
            "kButtonB",
            "kButtonDown",
            "kButtonLeft",
            "kButtonRight",
            "kButtonUp"
        ],
        "playdate.graphics": [
            "kColorBlack",
            "kColorWhite",
            "kColorClear",
            "kColorXOR",
            "kImageUnflipped",
            "kImageFlippedX",
            "kImageFlippedY",
            "kImageFlippedXY",
            "kPolygonFillNonZero",
            "kPolygonFillEvenOdd",
            "kLineCapStyleButt",
            "kLineCapStyleRound",
            "kLineCapStyleSquare",
            "kDrawModeBlackTransparent",
            "kDrawModeCopy",
            "kDrawModeFillBlack",
            "kDrawModeFillWhite",
            "kDrawModeInverted",
            "kDrawModeNXOR",
            "kDrawModeWhiteTransparent",
            "kDrawModeXOR",
            "kStrokeCentered",
            "kStrokeInside",
            "kStrokeOutside",
            "kAlignCenter",
            "kAlignLeft",
            "kAlignRight",
            "kWrapCharacter",
            "kWrapClip",
            "kWrapWord"
        ],
        "playdate.graphics.sprite": [
            "kCollisionTypeBounce",
            "kCollisionTypeFreeze",
            "kCollisionTypeOverlap",
            "kCollisionTypeSlide"
        ],
        "playdate.graphics.image": [
            "kDitherTypeNone",
            "kDitherTypeDiagonalLine",
            "kDitherTypeVerticalLine",
            "kDitherTypeHorizontalLine",
            "kDitherTypeScreen",
            "kDitherTypeBayer2x2",
            "kDitherTypeBayer4x4",
            "kDitherTypeBayer8x8",
            "kDitherTypeFloydSteinberg",
            "kDitherTypeBurkes",
            "kDitherTypeAtkinson"
        ],
        "playdate.graphics.font": [
            "kLanguageEnglish",
            "kLanguageJapanese",
            "kVariantBold",
            "kVariantItalic",
            "kVariantNormal"
        ],
        "playdate.file": [
            "kFileAppend",
            "kFileRead",
            "kFileWrite",
            "kSeekSet",
            "kSeekFromCurrent",
            "kSeekFromEnd"
        ],
        "playdate.keyboard": [
            "kCapitalizationNormal",
            "kCapitalizationWords",
            "kCapitalizationSentences"
        ],
        "playdate.sound": [
            "kFormat16bitMono",
            "kFormat16bitStereo",
            "kFormat8bitMono",
            "kFormat8bitStereo",
            "kWaveNoise",
            "kWavePODigital",
            "kWavePOPhase",
            "kWavePOVosim",
            "kWaveSawtooth",
            "kWaveSine",
            "kWaveSquare",
            "kWaveTriangle",
            "kLFOSampleAndHold",
            "kLFOSawtoothDown",
            "kLFOSawtoothUp",
            "kLFOSine",
            "kLFOSquare",
            "kLFOTriangle",
            "kFilterBandPass",
            "kFilterHighPass",
            "kFilterHighShelf",
            "kFilterLowPass",
            "kFilterLowShelf",
            "kFilterNotch",
            "kFilterPEQ"
        ]
    },
    "statements": [
        "import {PlaydateColor, PlaydateButton, PlaydateLanguage, PlaydateFlip, PlaydatePolygonFill, PlaydateDitherType, PlaydateLineCapStyle, PlaydateDrawMode, PlaydateStrokeLocation, PlaydateFontVariant, PlaydateTextAlignment, PlaydateCollisionResponse, PlaydateCapitalizationBehavior, PlaydateSoundFormat, PlaydateSoundWave, PlaydateSoundLfoType, PlaydateSoundTwoPoleFilterType, PlaydateFileOpenMode, PlaydateSeekWhence, PlaydateWrapMode} from '@crankscript/core';",
        "type PlaydateInputHandler = { AButtonDown: typeof AButtonDown; AButtonHeld: typeof AButtonHeld; AButtonUp: typeof AButtonUp; BButtonDown: typeof BButtonDown; BButtonHeld: typeof BButtonHeld; BButtonUp: typeof BButtonUp; downButtonDown: typeof downButtonDown; downButtonUp: typeof downButtonUp; leftButtonDown: typeof leftButtonDown; leftButtonUp: typeof leftButtonUp; rightButtonDown: typeof rightButtonDown; rightButtonUp: typeof rightButtonUp; upButtonDown: typeof upButtonDown; upButtonUp: typeof upButtonUp; cranked: typeof cranked; crankDocked: typeof crankDocked; crankUndocked: typeof crankUndocked; };",
        "type PlaydateFontFamily = { [PlaydateFontVariant.Normal]: playdate.graphics.font; [PlaydateFontVariant.Bold]: playdate.graphics.font; [PlaydateFontVariant.Italic]: playdate.graphics.font; };",
        "type PlaydateFontFamilyPaths = { [PlaydateFontVariant.Normal]: string; [PlaydateFontVariant.Bold]: string; [PlaydateFontVariant.Italic]: string; };",
        "type PlaydateGenericCollision<TType extends PlaydateCollisionResponse, TExtra = {} > = { sprite: playdate.graphics.sprite; other: playdate.graphics.sprite; type: TType; overlaps: boolean; ti: number; move: playdate.geometry.vector2D; normal: playdate.geometry.vector2D; touch: playdate.geometry.point; spriteRect: playdate.geometry.rect; otherRect: playdate.geometry.rect; } & TExtra;",
        "type PlaydateCollision = PlaydateGenericCollision<PlaydateCollisionResponse.Overlap> | PlaydateGenericCollision<PlaydateCollisionResponse.Freeze> | PlaydateGenericCollision<PlaydateCollisionResponse.Bounce, { bounce: playdate.geometry.point }> | PlaydateGenericCollision<PlaydateCollisionResponse.Slide, { slide: playdate.geometry.point }>;",
        "type PlaydateEasingFunction = typeof easingFunctions.linear | typeof easingFunctions.inQuad | typeof easingFunctions.outQuad | typeof easingFunctions.inOutQuad | typeof easingFunctions.outInQuad | typeof easingFunctions.inCubic | typeof easingFunctions.outCubic | typeof easingFunctions.inOutCubic | typeof easingFunctions.outInCubic | typeof easingFunctions.inQuart | typeof easingFunctions.outQuart | typeof easingFunctions.inOutQuart | typeof easingFunctions.outInQuart | typeof easingFunctions.inQuint | typeof easingFunctions.outQuint | typeof easingFunctions.inOutQuint | typeof easingFunctions.outInQuint | typeof easingFunctions.inSine | typeof easingFunctions.outSine | typeof easingFunctions.inOutSine | typeof easingFunctions.outInSine | typeof easingFunctions.inExpo | typeof easingFunctions.outExpo | typeof easingFunctions.inOutExpo | typeof easingFunctions.outInExpo | typeof easingFunctions.inCirc | typeof easingFunctions.outCirc | typeof easingFunctions.inOutCirc | typeof easingFunctions.outInCirc | typeof easingFunctions.inElastic | typeof easingFunctions.outElastic | typeof easingFunctions.inOutElastic | typeof easingFunctions.outInElastic | typeof easingFunctions.inBack | typeof easingFunctions.outBack | typeof easingFunctions.inOutBack | typeof easingFunctions.outInBack | typeof easingFunctions.outBounce | typeof easingFunctions.inBounce | typeof easingFunctions.inOutBounce | typeof easingFunctions.outInBounce;",
        "type PlaydateCollisionInfo = { sprite: playdate.graphics.sprite; entryPoint: playdate.geometry.point; exitPoint: playdate.geometry.point; ti1: number; ti2: number; };",
        "type PlaydateAudioSource = playdate.sound.fileplayer | playdate.sound.sampleplayer | playdate.sound.synth | playdate.sound.instrument;",
        "type PlaydateSoundEffect = playdate.sound.bitcrusher | playdate.sound.twopolefilter | playdate.sound.onepolefilter | playdate.sound.ringmod | playdate.sound.overdrive | playdate.sound.delayline;"
    ],
    "classes": {
        "playdate.graphics.animator": {
            "typeParameters": "TSubject extends number | playdate.geometry.point"
        }
    },
    "properties": {
        "playdate.argv": {
            "signature": "playdate.argv",
            "type": "unknown",
            "isStatic": true
        },
        "playdate.isSimulator": {
            "signature": "playdate.isSimulator",
            "type": "1 | null",
            "isStatic": true
        },
        "playdate.graphics.animator.easingAmplitude": {
            "signature": "playdate.graphics.animator.easingAmplitude",
            "type": "number"
        },
        "playdate.graphics.animator.easingPeriod": {
            "signature": "playdate.graphics.animator.easingPeriod",
            "type": "number"
        },
        "playdate.graphics.animator.repeatCount": {
            "signature": "playdate.graphics.animator.repeatCount",
            "type": "number"
        },
        "playdate.graphics.animator.reverses": {
            "signature": "playdate.graphics.animator.reverses",
            "type": "number"
        },
        "playdate.keyboard.text": {
            "signature": "playdate.keyboard.text",
            "type": "string"
        },
        "playdate.sound.controlsignal.events": {
            "signature": "playdate.sound.controlsignal.events",
            "type": "{ step: number; value: number; interpolate?: boolean; }[]"
        },
        "playdate.timer.value": {
            "signature": "playdate.timer.value",
            "type": "number"
        },
        "playdate.timer.easingFunction": {
            "signature": "playdate.timer.easingFunction",
            "type": "(t: number, b: number, c: number, d: number) => number"
        },
        "playdate.timer.easingAmplitude": {
            "signature": "playdate.timer.easingAmplitude",
            "type": "number"
        },
        "playdate.timer.easingPeriod": {
            "signature": "playdate.timer.easingPeriod",
            "type": "number"
        },
        "playdate.timer.reverseEasingFunction": {
            "signature": "playdate.timer.reverseEasingFunction",
            "type": "(t: number, b: number, c: number, d: number) => number"
        },
        "playdate.timer.startValue": {
            "signature": "playdate.timer.startValue",
            "type": "number"
        },
        "playdate.timer.endValue": {
            "signature": "playdate.timer.endValue",
            "type": "number"
        },
        "playdate.timer.currentTime": {
            "signature": "playdate.timer.currentTime",
            "type": "number",
            "isReadOnly": true
        },
        "playdate.timer.delay": {
            "signature": "playdate.timer.delay",
            "type": "number"
        },
        "playdate.timer.discardOnCompletion": {
            "signature": "playdate.timer.discardOnCompletion",
            "type": "boolean"
        },
        "playdate.timer.duration": {
            "signature": "playdate.timer.duration",
            "type": "number"
        },
        "playdate.timer.timeLeft": {
            "signature": "playdate.timer.timeLeft",
            "type": "number",
            "isReadOnly": true
        },
        "playdate.timer.paused": {
            "signature": "playdate.timer.paused",
            "type": "boolean"
        },
        "playdate.timer.repeats": {
            "signature": "playdate.timer.repeats",
            "type": "boolean"
        },
        "playdate.timer.reverses": {
            "signature": "playdate.timer.reverses",
            "type": "boolean"
        },
        "playdate.timer.timerEndedArgs": {
            "signature": "playdate.timer.timerEndedArgs",
            "type": "unknown[]"
        },
        "playdate.frameTimer.value": {
            "signature": "playdate.frameTimer.value",
            "type": "number"
        },
        "playdate.frameTimer.startValue": {
            "signature": "playdate.frameTimer.startValue",
            "type": "number"
        },
        "playdate.frameTimer.endValue": {
            "signature": "playdate.frameTimer.endValue",
            "type": "number"
        },
        "playdate.frameTimer.easingFunction": {
            "signature": "playdate.frameTimer.easingFunction",
            "type": "(t: number, b: number, c: number, d: number) => number"
        },
        "playdate.frameTimer.easingAmplitude": {
            "signature": "playdate.frameTimer.easingAmplitude",
            "type": "number"
        },
        "playdate.frameTimer.easingPeriod": {
            "signature": "playdate.frameTimer.easingPeriod",
            "type": "number"
        },
        "playdate.frameTimer.reverseEasingFunction": {
            "signature": "playdate.frameTimer.reverseEasingFunction",
            "type": "(t: number, b: number, c: number, d: number) => number"
        },
        "playdate.frameTimer.delay": {
            "signature": "playdate.frameTimer.delay",
            "type": "number"
        },
        "playdate.frameTimer.discardOnCompletion": {
            "signature": "playdate.frameTimer.discardOnCompletion",
            "type": "boolean"
        },
        "playdate.frameTimer.duration": {
            "signature": "playdate.frameTimer.duration",
            "type": "number"
        },
        "playdate.frameTimer.frame": {
            "signature": "playdate.frameTimer.frame",
            "type": "number"
        },
        "playdate.frameTimer.repeats": {
            "signature": "playdate.frameTimer.repeats",
            "type": "boolean"
        },
        "playdate.frameTimer.reverses": {
            "signature": "playdate.frameTimer.reverses",
            "type": "boolean"
        },
        "playdate.frameTimer.timerEndedArgs": {
            "signature": "playdate.frameTimer.timerEndedArgs",
            "type": "unknown[]"
        },
        "playdate.ui.crankIndicator.clockwise": {
            "signature": "playdate.ui.crankIndicator.clockwise",
            "type": "boolean"
        },
        "playdate.ui.gridview.needsDisplay": {
            "signature": "playdate.ui.gridview.needsDisplay",
            "type": "boolean",
            "isReadOnly": true
        },
        "playdate.ui.gridview.backgroundImage": {
            "signature": "playdate.ui.gridview.backgroundImage",
            "type": "playdate.graphics.image | playdate.graphics.nineSlice"
        },
        "playdate.ui.gridview.isScrolling": {
            "signature": "playdate.ui.gridview.isScrolling",
            "type": "boolean",
            "isReadOnly": true
        },
        "playdate.ui.gridview.scrollEasingFunction": {
            "signature": "playdate.ui.gridview.scrollEasingFunction",
            "type": "(t: number, b: number, c: number, d: number) => number"
        },
        "playdate.ui.gridview.easingAmplitude": {
            "signature": "playdate.ui.gridview.easingAmplitude",
            "type": "number"
        },
        "playdate.ui.gridview.easingPeriod": {
            "signature": "playdate.ui.gridview.easingPeriod",
            "type": "number"
        },
        "playdate.ui.gridview.changeRowOnColumnWrap": {
            "signature": "playdate.ui.gridview.changeRowOnColumnWrap",
            "type": "boolean"
        },
        "playdate.ui.gridview.scrollCellsToCenter": {
            "signature": "playdate.ui.gridview.scrollCellsToCenter",
            "type": "boolean"
        },
        "playdate.geometry.rect.x": {
            "signature": "playdate.geometry.rect.x",
            "type": "number"
        },
        "playdate.geometry.rect.y": {
            "signature": "playdate.geometry.rect.y",
            "type": "number"
        },
        "playdate.geometry.rect.width": {
            "signature": "playdate.geometry.rect.width",
            "type": "number"
        },
        "playdate.geometry.rect.height": {
            "signature": "playdate.geometry.rect.height",
            "type": "number"
        },
        "playdate.geometry.rect.top": {
            "signature": "playdate.geometry.rect.top",
            "type": "number",
            "isReadOnly": true
        },
        "playdate.geometry.rect.bottom": {
            "signature": "playdate.geometry.rect.bottom",
            "type": "number",
            "isReadOnly": true
        },
        "playdate.geometry.rect.right": {
            "signature": "playdate.geometry.rect.right",
            "type": "number",
            "isReadOnly": true
        },
        "playdate.geometry.rect.left": {
            "signature": "playdate.geometry.rect.left",
            "type": "number",
            "isReadOnly": true
        },
        "playdate.geometry.rect.origin": {
            "signature": "playdate.geometry.rect.origin",
            "type": "LuaMultiReturn<[number, number]>",
            "isReadOnly": true
        },
        "playdate.geometry.rect.size": {
            "signature": "playdate.geometry.rect.size",
            "type": "LuaMultiReturn<[number, number]>",
            "isReadOnly": true
        }
    },
    "dynamicProperties": {
        "playdate.geometry.rect": [
            {
                "name": "x",
                "docs": "The x-coordinate of the rectangle's top-left corner."
            },
            {
                "name": "y",
                "docs": "The y-coordinate of the rectangle's top-left corner."
            },
            {
                "name": "width",
                "docs": "The width of the rectangle."
            },
            {
                "name": "height",
                "docs": "The height of the rectangle."
            },
            {
                "name": "top",
                "docs": "The y-coordinate of the rectangle's top edge."
            },
            {
                "name": "bottom",
                "docs": "The y-coordinate of the rectangle's bottom edge."
            },
            {
                "name": "right",
                "docs": "The x-coordinate of the rectangle's right edge."
            },
            {
                "name": "left",
                "docs": "The x-coordinate of the rectangle's left edge."
            },
            {
                "name": "origin",
                "docs": "The coordinates of the top left corner."
            },
            {
                "name": "size",
                "docs": "The width and height of the rectangle."
            }
        ]
    },
    "functions": {
        "print(string)": {
            "signature": "print(string)",
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "arg",
                    "type": "unknown[]",
                    "overrideOptions": {
                        "isRestParameter": true
                    }
                }
            ],
            "returnType": "void"
        },
        "printTable(table)": {
            "signature": "printTable(table)",
            "parameters": [
                {
                    "name": "table",
                    "type": "AnyTable"
                }
            ],
            "returnType": "void"
        },
        "where()": {
            "signature": "where()",
            "parameters": [],
            "returnType": "string"
        },
        "playdate.apiVersion()": {
            "signature": "playdate.apiVersion()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.metadata": {
            "signature": "playdate.metadata",
            "parameters": [],
            "returnType": "AnyTable"
        },
        "playdate.update()": {
            "signature": "playdate.update()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.wait(milliseconds)": {
            "signature": "playdate.wait(milliseconds)",
            "parameters": [
                {
                    "name": "milliseconds",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.stop()": {
            "signature": "playdate.stop()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.start()": {
            "signature": "playdate.start()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.restart([arg])": {
            "signature": "playdate.restart([arg])",
            "parameters": [
                {
                    "name": "arg",
                    "type": "unknown"
                }
            ],
            "returnType": "void"
        },
        "playdate.gameWillTerminate()": {
            "signature": "playdate.gameWillTerminate()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.deviceWillSleep()": {
            "signature": "playdate.deviceWillSleep()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.deviceWillLock()": {
            "signature": "playdate.deviceWillLock()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.deviceDidUnlock()": {
            "signature": "playdate.deviceDidUnlock()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.gameWillPause()": {
            "signature": "playdate.gameWillPause()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.gameWillResume()": {
            "signature": "playdate.gameWillResume()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.getSystemMenu()": {
            "signature": "playdate.getSystemMenu()",
            "parameters": [],
            "returnType": "playdate.menu"
        },
        "playdate.setMenuImage(image, [xOffset])": {
            "signature": "playdate.setMenuImage(image, [xOffset])",
            "parameters": [
                {
                    "name": "image",
                    "type": "playdate.graphics.image | null"
                },
                {
                    "name": "xOffset",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.getSystemLanguage()": {
            "signature": "playdate.getSystemLanguage()",
            "parameters": [],
            "returnType": "PlaydateLanguage"
        },
        "playdate.getReduceFlashing()": {
            "signature": "playdate.getReduceFlashing()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.getFlipped()": {
            "signature": "playdate.getFlipped()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.startAccelerometer()": {
            "signature": "playdate.startAccelerometer()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.stopAccelerometer()": {
            "signature": "playdate.stopAccelerometer()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.readAccelerometer()": {
            "signature": "playdate.readAccelerometer()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number, number]>"
        },
        "playdate.accelerometerIsRunning()": {
            "signature": "playdate.accelerometerIsRunning()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.buttonIsPressed(button)": {
            "signature": "playdate.buttonIsPressed(button)",
            "parameters": [
                {
                    "name": "button",
                    "type": "PlaydateButton"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.buttonJustPressed(button)": {
            "signature": "playdate.buttonJustPressed(button)",
            "parameters": [
                {
                    "name": "button",
                    "type": "PlaydateButton"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.buttonJustReleased(button)": {
            "signature": "playdate.buttonJustReleased(button)",
            "parameters": [
                {
                    "name": "button",
                    "type": "PlaydateButton"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.getButtonState()": {
            "signature": "playdate.getButtonState()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number, number]>"
        },
        "playdate.setButtonQueueSize(size)": {
            "signature": "playdate.setButtonQueueSize(size)",
            "parameters": [
                {
                    "name": "size",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.AButtonDown()": {
            "signature": "playdate.AButtonDown()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.AButtonHeld()": {
            "signature": "playdate.AButtonHeld()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.AButtonUp()": {
            "signature": "playdate.AButtonUp()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.BButtonDown()": {
            "signature": "playdate.BButtonDown()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.BButtonHeld()": {
            "signature": "playdate.BButtonHeld()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.BButtonUp()": {
            "signature": "playdate.BButtonUp()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.downButtonDown()": {
            "signature": "playdate.downButtonDown()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.downButtonUp()": {
            "signature": "playdate.downButtonUp()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.leftButtonDown()": {
            "signature": "playdate.leftButtonDown()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.leftButtonUp()": {
            "signature": "playdate.leftButtonUp()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.rightButtonDown()": {
            "signature": "playdate.rightButtonDown()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.rightButtonUp()": {
            "signature": "playdate.rightButtonUp()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.upButtonDown()": {
            "signature": "playdate.upButtonDown()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.upButtonUp()": {
            "signature": "playdate.upButtonUp()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.isCrankDocked()": {
            "signature": "playdate.isCrankDocked()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.getCrankPosition()": {
            "signature": "playdate.getCrankPosition()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.getCrankChange()": {
            "signature": "playdate.getCrankChange()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.getCrankTicks(ticksPerRevolution)": {
            "signature": "playdate.getCrankTicks(ticksPerRevolution)",
            "parameters": [
                {
                    "name": "ticksPerRevolution",
                    "type": "number"
                }
            ],
            "returnType": "number"
        },
        "playdate.cranked(change, acceleratedChange)": {
            "signature": "playdate.cranked(change, acceleratedChange)",
            "parameters": [
                {
                    "name": "change",
                    "type": "number"
                },
                {
                    "name": "acceleratedChange",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.crankDocked()": {
            "signature": "playdate.crankDocked()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.crankUndocked()": {
            "signature": "playdate.crankUndocked()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.setCrankSoundsDisabled(disable)": {
            "signature": "playdate.setCrankSoundsDisabled(disable)",
            "parameters": [
                {
                    "name": "disable",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.setAutoLockDisabled(disable)": {
            "signature": "playdate.setAutoLockDisabled(disable)",
            "parameters": [
                {
                    "name": "disable",
                    "type": "boolean"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.getCurrentTimeMilliseconds()": {
            "signature": "playdate.getCurrentTimeMilliseconds()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.resetElapsedTime()": {
            "signature": "playdate.resetElapsedTime()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.getElapsedTime()": {
            "signature": "playdate.getElapsedTime()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.getSecondsSinceEpoch()": {
            "signature": "playdate.getSecondsSinceEpoch()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.getTime()": {
            "signature": "playdate.getTime()",
            "parameters": [],
            "returnType": "{year: number; month: number; day: number; weekday: number; hour: number; minute: number; second: number; millisecond: number;}"
        },
        "playdate.getGMTTime()": {
            "signature": "playdate.getGMTTime()",
            "parameters": [],
            "returnType": "{year: number; month: number; day: number; weekday: number; hour: number; minute: number; second: number; millisecond: number;}"
        },
        "playdate.epochFromTime(time)": {
            "signature": "playdate.epochFromTime(time)",
            "parameters": [
                {
                    "name": "time",
                    "type": "{year: number; month: number; day: number; weekday: number; hour: number; minute: number; second: number; millisecond: number;}"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.epochFromGMTTime(time)": {
            "signature": "playdate.epochFromGMTTime(time)",
            "parameters": [
                {
                    "name": "time",
                    "type": "{year: number; month: number; day: number; weekday: number; hour: number; minute: number; second: number; millisecond: number;}"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.timeFromEpoch(seconds, milliseconds)": {
            "signature": "playdate.timeFromEpoch(seconds, milliseconds)",
            "parameters": [
                {
                    "name": "seconds",
                    "type": "number"
                },
                {
                    "name": "milliseconds",
                    "type": "number"
                }
            ],
            "returnType": "{year: number; month: number; day: number; weekday: number; hour: number; minute: number; second: number; millisecond: number;}"
        },
        "playdate.GMTTimeFromEpoch(seconds, milliseconds)": {
            "signature": "playdate.GMTTimeFromEpoch(seconds, milliseconds)",
            "parameters": [
                {
                    "name": "seconds",
                    "type": "number"
                },
                {
                    "name": "milliseconds",
                    "type": "number"
                }
            ],
            "returnType": "{year: number; month: number; day: number; weekday: number; hour: number; minute: number; second: number; millisecond: number;}"
        },
        "playdate.shouldDisplay24HourTime()": {
            "signature": "playdate.shouldDisplay24HourTime()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.setNewlinePrinted(flag)": {
            "signature": "playdate.setNewlinePrinted(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.drawFPS(x, y)": {
            "signature": "playdate.drawFPS(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.getFPS()": {
            "signature": "playdate.getFPS()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.getStats()": {
            "signature": "playdate.getStats()",
            "parameters": [],
            "returnType": "{kernel: number; serial: number; game: number; GC: number; wifi: number; audio: number; trace: number; idle: number;}"
        },
        "playdate.setStatsInterval(seconds)": {
            "signature": "playdate.setStatsInterval(seconds)",
            "parameters": [
                {
                    "name": "seconds",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.getPowerStatus()": {
            "signature": "playdate.getPowerStatus()",
            "parameters": [],
            "returnType": "{ charging: boolean; USB: boolean; screws: boolean; }"
        },
        "playdate.getBatteryPercentage()": {
            "signature": "playdate.getBatteryPercentage()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.getBatteryVoltage()": {
            "signature": "playdate.getBatteryVoltage()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.clearConsole()": {
            "signature": "playdate.clearConsole()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.setDebugDrawColor(r, g, b, a)": {
            "signature": "playdate.setDebugDrawColor(r, g, b, a)",
            "parameters": [
                {
                    "name": "r",
                    "type": "number"
                },
                {
                    "name": "g",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "a",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.keyPressed(key)": {
            "signature": "playdate.keyPressed(key)",
            "parameters": [
                {
                    "name": "key",
                    "type": "string"
                }
            ],
            "returnType": "void"
        },
        "playdate.keyReleased(key)": {
            "signature": "playdate.keyReleased(key)",
            "parameters": [
                {
                    "name": "key",
                    "type": "string"
                }
            ],
            "returnType": "void"
        },
        "playdate.debugDraw()": {
            "signature": "playdate.debugDraw()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.serialMessageReceived(message)": {
            "signature": "playdate.serialMessageReceived(message)",
            "parameters": [
                {
                    "name": "message",
                    "type": "string"
                }
            ],
            "returnType": "void"
        },
        "playdate.setCollectsGarbage(flag)": {
            "signature": "playdate.setCollectsGarbage(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.setMinimumGCTime(ms)": {
            "signature": "playdate.setMinimumGCTime(ms)",
            "parameters": [
                {
                    "name": "ms",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.setGCScaling(min, max)": {
            "signature": "playdate.setGCScaling(min, max)",
            "parameters": [
                {
                    "name": "min",
                    "type": "number"
                },
                {
                    "name": "max",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.menu:addMenuItem(title, callback)": {
            "signature": "playdate.menu:addMenuItem(title, callback)",
            "parameters": [
                {
                    "name": "title",
                    "type": "string"
                },
                {
                    "name": "callback",
                    "type": "() => void"
                }
            ],
            "returnType": "LuaMultiReturn<[playdate.menu.item, undefined]> | LuaMultiReturn<[null, string]>"
        },
        "playdate.menu:addCheckmarkMenuItem(title, [initialValue], callback)": {
            "signature": "playdate.menu:addCheckmarkMenuItem(title, [initialValue], callback)",
            "parameters": [
                {
                    "name": "title",
                    "type": "string"
                },
                {
                    "name": "initialValue",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "false"
                    }
                },
                {
                    "name": "callback",
                    "type": "(value: boolean) => void"
                }
            ],
            "returnType": "LuaMultiReturn<[playdate.menu.item, undefined]> | LuaMultiReturn<[null, string]>"
        },
        "playdate.menu:addOptionsMenuItem(title, options, [initalValue], callback)": {
            "signature": "playdate.menu:addOptionsMenuItem(title, options, [initalValue], callback)",
            "overrideOptions": {
                "typeParameters": "TOptions extends string[]"
            },
            "parameters": [
                {
                    "name": "title",
                    "type": "string"
                },
                {
                    "name": "options",
                    "type": "TOptions"
                },
                {
                    "name": "initalValue",
                    "type": "TOptions[number]"
                },
                {
                    "name": "callback",
                    "type": "() => void"
                }
            ],
            "returnType": "LuaMultiReturn<[playdate.menu.item, undefined]> | LuaMultiReturn<[null, string]>"
        },
        "playdate.menu:getMenuItems()": {
            "signature": "playdate.menu:getMenuItems()",
            "parameters": [],
            "returnType": "playdate.menu.item[]"
        },
        "playdate.menu:removeMenuItem(menuItem)": {
            "signature": "playdate.menu:removeMenuItem(menuItem)",
            "parameters": [
                {
                    "name": "menuItem",
                    "type": "playdate.menu.item"
                }
            ],
            "returnType": "void"
        },
        "playdate.menu:removeAllMenuItems()": {
            "signature": "playdate.menu:removeAllMenuItems()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.menu.item:setCallback(callback)": {
            "signature": "playdate.menu.item:setCallback(callback)",
            "parameters": [
                {
                    "name": "callback",
                    "type": "() => void"
                }
            ],
            "returnType": "void"
        },
        "playdate.menu.item:setTitle(newTitle)": {
            "signature": "playdate.menu.item:setTitle(newTitle)",
            "parameters": [
                {
                    "name": "newTitle",
                    "type": "string"
                }
            ],
            "returnType": "void"
        },
        "playdate.menu.item:getTitle()": {
            "signature": "playdate.menu.item:getTitle()",
            "parameters": [],
            "returnType": "string"
        },
        "playdate.menu.item:setValue(newValue)": {
            "signature": "playdate.menu.item:setValue(newValue)",
            "parameters": [
                {
                    "name": "newValue",
                    "type": "number | boolean | string"
                }
            ],
            "returnType": "void"
        },
        "playdate.menu.item:getValue()": {
            "signature": "playdate.menu.item:getValue()",
            "parameters": [],
            "returnType": "number | boolean | string"
        },
        "playdate.inputHandlers.push(handler, [masksPreviousHandlers])": {
            "signature": "playdate.inputHandlers.push(handler, [masksPreviousHandlers])",
            "parameters": [
                {
                    "name": "handler",
                    "type": "PlaydateInputHandler"
                },
                {
                    "name": "masksPreviousHandlers",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.inputHandlers.pop()": {
            "signature": "playdate.inputHandlers.pop()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.display.setRefreshRate(rate)": {
            "signature": "playdate.display.setRefreshRate(rate)",
            "parameters": [
                {
                    "name": "rate",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.display.getRefreshRate()": {
            "signature": "playdate.display.getRefreshRate()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.display.flush()": {
            "signature": "playdate.display.flush()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.display.getHeight()": {
            "signature": "playdate.display.getHeight()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.display.getWidth()": {
            "signature": "playdate.display.getWidth()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.display.getSize()": {
            "signature": "playdate.display.getSize()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.display.getRect()": {
            "signature": "playdate.display.getRect()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number, number, number]>"
        },
        "playdate.display.setScale(scale)": {
            "signature": "playdate.display.setScale(scale)",
            "parameters": [
                {
                    "name": "scale",
                    "type": "1 | 2 | 4 | 8"
                }
            ],
            "returnType": "void"
        },
        "playdate.display.getScale()": {
            "signature": "playdate.display.getScale()",
            "parameters": [],
            "returnType": "1 | 2 | 4 | 8"
        },
        "playdate.display.setInverted(flag)": {
            "signature": "playdate.display.setInverted(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.display.getInverted()": {
            "signature": "playdate.display.getInverted()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.display.setMosaic(x, y)": {
            "signature": "playdate.display.setMosaic(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.display.getMosaic()": {
            "signature": "playdate.display.getMosaic()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.display.setOffset(x, y)": {
            "signature": "playdate.display.setOffset(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.display.getOffset()": {
            "signature": "playdate.display.getOffset()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.display.setFlipped(x, y)": {
            "signature": "playdate.display.setFlipped(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "boolean"
                },
                {
                    "name": "y",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.display.loadImage(path)": {
            "signature": "playdate.display.loadImage(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.linear(t, b, c, d)": {
            "signature": "playdate.easingFunctions.linear(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inQuad(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inQuad(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outQuad(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outQuad(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inOutQuad(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inOutQuad(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outInQuad(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outInQuad(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inCubic(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inCubic(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outCubic(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outCubic(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inOutCubic(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inOutCubic(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outInCubic(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outInCubic(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inQuart(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inQuart(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outQuart(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outQuart(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inOutQuart(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inOutQuart(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outInQuart(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outInQuart(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inQuint(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inQuint(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outQuint(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outQuint(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inOutQuint(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inOutQuint(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outInQuint(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outInQuint(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inSine(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inSine(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outSine(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outSine(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inOutSine(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inOutSine(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outInSine(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outInSine(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inExpo(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inExpo(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outExpo(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outExpo(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inOutExpo(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inOutExpo(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outInExpo(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outInExpo(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inCirc(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inCirc(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outCirc(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outCirc(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inOutCirc(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inOutCirc(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outInCirc(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outInCirc(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inElastic(t, b, c, d, [a, p])": {
            "signature": "playdate.easingFunctions.inElastic(t, b, c, d, [a, p])",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                },
                {
                    "name": "a",
                    "type": "number"
                },
                {
                    "name": "p",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outElastic(t, b, c, d, [a, p])": {
            "signature": "playdate.easingFunctions.outElastic(t, b, c, d, [a, p])",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                },
                {
                    "name": "a",
                    "type": "number"
                },
                {
                    "name": "p",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inOutElastic(t, b, c, d, [a, p])": {
            "signature": "playdate.easingFunctions.inOutElastic(t, b, c, d, [a, p])",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                },
                {
                    "name": "a",
                    "type": "number"
                },
                {
                    "name": "p",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outInElastic(t, b, c, d, [a, p])": {
            "signature": "playdate.easingFunctions.outInElastic(t, b, c, d, [a, p])",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                },
                {
                    "name": "a",
                    "type": "number"
                },
                {
                    "name": "p",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inBack(t, b, c, d, [s])": {
            "signature": "playdate.easingFunctions.inBack(t, b, c, d, [s])",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                },
                {
                    "name": "s",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outBack(t, b, c, d, [s])": {
            "signature": "playdate.easingFunctions.outBack(t, b, c, d, [s])",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                },
                {
                    "name": "s",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inOutBack(t, b, c, d, [s])": {
            "signature": "playdate.easingFunctions.inOutBack(t, b, c, d, [s])",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                },
                {
                    "name": "s",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outInBack(t, b, c, d, [s])": {
            "signature": "playdate.easingFunctions.outInBack(t, b, c, d, [s])",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                },
                {
                    "name": "s",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outBounce(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outBounce(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inBounce(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inBounce(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.inOutBounce(t, b, c, d)": {
            "signature": "playdate.easingFunctions.inOutBounce(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.easingFunctions.outInBounce(t, b, c, d)": {
            "signature": "playdate.easingFunctions.outInBounce(t, b, c, d)",
            "parameters": [
                {
                    "name": "t",
                    "type": "number"
                },
                {
                    "name": "b",
                    "type": "number"
                },
                {
                    "name": "c",
                    "type": "number"
                },
                {
                    "name": "d",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.datastore.write(table, [filename], [pretty-print])": {
            "signature": "playdate.datastore.write(table, [filename], [pretty-print])",
            "parameters": [
                {
                    "name": "table",
                    "type": "AnyTable"
                },
                {
                    "name": "filename",
                    "type": "string"
                },
                {
                    "name": "pretty-print",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.datastore.read([filename])": {
            "signature": "playdate.datastore.read([filename])",
            "parameters": [
                {
                    "name": "filename",
                    "type": "string"
                }
            ],
            "returnType": "AnyTable | null"
        },
        "playdate.datastore.delete([filename])": {
            "signature": "playdate.datastore.delete([filename])",
            "parameters": [
                {
                    "name": "filename",
                    "type": "string"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.datastore.writeImage(image, path)": {
            "signature": "playdate.datastore.writeImage(image, path)",
            "parameters": [
                {
                    "name": "image",
                    "type": "playdate.graphics.image"
                },
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "void"
        },
        "playdate.datastore.readImage(path)": {
            "signature": "playdate.datastore.readImage(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "playdate.graphics.image"
        },
        "playdate.file.open(path, [mode])": {
            "signature": "playdate.file.open(path, [mode])",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                },
                {
                    "name": "mode",
                    "type": "PlaydateFileOpenMode",
                    "overrideOptions": {
                        "initializer": "PlaydateFileOpenMode.Read"
                    }
                }
            ],
            "returnType": "playdate.file.file"
        },
        "playdate.file.listFiles(path, [showhidden])": {
            "signature": "playdate.file.listFiles(path, [showhidden])",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                },
                {
                    "name": "showhidden",
                    "type": "boolean"
                }
            ],
            "returnType": "string[]"
        },
        "playdate.file.exists(path)": {
            "signature": "playdate.file.exists(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.file.isdir(path)": {
            "signature": "playdate.file.isdir(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.file.mkdir(path)": {
            "signature": "playdate.file.mkdir(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "void"
        },
        "playdate.file.delete(path, [recursive])": {
            "signature": "playdate.file.delete(path, [recursive])",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                },
                {
                    "name": "recursive",
                    "type": "boolean"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.file.getSize(path)": {
            "signature": "playdate.file.getSize(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "number"
        },
        "playdate.file.getType(path)": {
            "signature": "playdate.file.getType(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "number"
        },
        "playdate.file.modtime(path)": {
            "signature": "playdate.file.modtime(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "{ year: number; month: number; day: number; hour: number; minute: number; second: number; }"
        },
        "playdate.file.rename(path, newPath)": {
            "signature": "playdate.file.rename(path, newPath)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                },
                {
                    "name": "newPath",
                    "type": "string"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.file.load(path, [env])": {
            "signature": "playdate.file.load(path, [env])",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                },
                {
                    "name": "env",
                    "type": "AnyTable"
                }
            ],
            "returnType": "void"
        },
        "playdate.file.run(path, [env])": {
            "signature": "playdate.file.run(path, [env])",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                },
                {
                    "name": "env",
                    "type": "AnyTable"
                }
            ],
            "returnType": "void"
        },
        "playdate.file.file:close()": {
            "signature": "playdate.file.file:close()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.file.file:write(string)": {
            "signature": "playdate.file.file:write(string)",
            "parameters": [
                {
                    "name": "string",
                    "type": "string"
                }
            ],
            "returnType": "LuaMultiReturn<[number, undefined]> | LuaMultiReturn<[0, string]>"
        },
        "playdate.file.file:flush()": {
            "signature": "playdate.file.file:flush()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.file.file:readline()": {
            "signature": "playdate.file.file:readline()",
            "parameters": [],
            "returnType": "string"
        },
        "playdate.file.file:read(numberOfBytes)": {
            "signature": "playdate.file.file:read(numberOfBytes)",
            "parameters": [
                {
                    "name": "numberOfBytes",
                    "type": "number"
                }
            ],
            "returnType": "LuaMultiReturn<[string, number]> | LuaMultiReturn<[null, string]>"
        },
        "playdate.file.file:seek(offset, [whence])": {
            "signature": "playdate.file.file:seek(offset, [whence])",
            "parameters": [
                {
                    "name": "offset",
                    "type": "number"
                },
                {
                    "name": "whence",
                    "type": "PlaydateSeekWhence"
                }
            ],
            "returnType": "void"
        },
        "playdate.file.file:tell()": {
            "signature": "playdate.file.file:tell()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.geometry.squaredDistanceToPoint(x1, y1, x2, y2)": {
            "signature": "playdate.geometry.squaredDistanceToPoint(x1, y1, x2, y2)",
            "parameters": [
                {
                    "name": "x1",
                    "type": "number"
                },
                {
                    "name": "y1",
                    "type": "number"
                },
                {
                    "name": "x2",
                    "type": "number"
                },
                {
                    "name": "y2",
                    "type": "number"
                }
            ],
            "returnType": "number"
        },
        "playdate.geometry.distanceToPoint(x1, y1, x2, y2)": {
            "signature": "playdate.geometry.distanceToPoint(x1, y1, x2, y2)",
            "parameters": [
                {
                    "name": "x1",
                    "type": "number"
                },
                {
                    "name": "y1",
                    "type": "number"
                },
                {
                    "name": "x2",
                    "type": "number"
                },
                {
                    "name": "y2",
                    "type": "number"
                }
            ],
            "returnType": "number"
        },
        "playdate.geometry.affineTransform.new(m11, m12, m21, m22, tx, ty)": {
            "signature": "playdate.geometry.affineTransform.new(m11, m12, m21, m22, tx, ty)",
            "parameters": [
                {
                    "name": "m11",
                    "type": "number"
                },
                {
                    "name": "m12",
                    "type": "number"
                },
                {
                    "name": "m21",
                    "type": "number"
                },
                {
                    "name": "m22",
                    "type": "number"
                },
                {
                    "name": "tx",
                    "type": "number"
                },
                {
                    "name": "ty",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.affineTransformTransform"
        },
        "playdate.geometry.affineTransform.new()": {
            "signature": "playdate.geometry.affineTransform.new()",
            "parameters": [],
            "returnType": "playdate.geometry.affineTransformTransform"
        },
        "playdate.geometry.affineTransform:copy()": {
            "signature": "playdate.geometry.affineTransform:copy()",
            "parameters": [],
            "returnType": "playdate.geometry.affineTransformTransform"
        },
        "playdate.geometry.affineTransform:invert()": {
            "signature": "playdate.geometry.affineTransform:invert()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.geometry.affineTransform:reset()": {
            "signature": "playdate.geometry.affineTransform:reset()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.geometry.affineTransform:concat(af)": {
            "signature": "playdate.geometry.affineTransform:concat(af)",
            "parameters": [
                {
                    "name": "af",
                    "type": "playdate.geometry.affineTransformTransform"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.affineTransform:translate(dx, dy)": {
            "signature": "playdate.geometry.affineTransform:translate(dx, dy)",
            "parameters": [
                {
                    "name": "dx",
                    "type": "number"
                },
                {
                    "name": "dy",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.affineTransform:translatedBy(dx, dy)": {
            "signature": "playdate.geometry.affineTransform:translatedBy(dx, dy)",
            "parameters": [
                {
                    "name": "dx",
                    "type": "number"
                },
                {
                    "name": "dy",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.affineTransformTransform"
        },
        "playdate.geometry.affineTransform:scale(sx, [sy])": {
            "signature": "playdate.geometry.affineTransform:scale(sx, [sy])",
            "parameters": [
                {
                    "name": "sx",
                    "type": "number"
                },
                {
                    "name": "sy",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.affineTransform:scaledBy(sx, [sy])": {
            "signature": "playdate.geometry.affineTransform:scaledBy(sx, [sy])",
            "parameters": [
                {
                    "name": "sx",
                    "type": "number"
                },
                {
                    "name": "sy",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.affineTransformTransform"
        },
        "playdate.geometry.affineTransform:rotate(angle, [x, y])": {
            "signature": "playdate.geometry.affineTransform:rotate(angle, [x, y])",
            "parameters": [
                {
                    "name": "angle",
                    "type": "number"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.affineTransform:rotate(angle, [point])": {
            "signature": "playdate.geometry.affineTransform:rotate(angle, [point])",
            "parameters": [
                {
                    "name": "angle",
                    "type": "number"
                },
                {
                    "name": "point",
                    "type": "playdate.geometry.point"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.affineTransform:rotatedBy(angle, [x, y])": {
            "signature": "playdate.geometry.affineTransform:rotatedBy(angle, [x, y])",
            "parameters": [
                {
                    "name": "angle",
                    "type": "number"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.affineTransformTransform"
        },
        "playdate.geometry.affineTransform:rotatedBy(angle, [point])": {
            "signature": "playdate.geometry.affineTransform:rotatedBy(angle, [point])",
            "parameters": [
                {
                    "name": "angle",
                    "type": "number"
                },
                {
                    "name": "point",
                    "type": "playdate.geometry.point"
                }
            ],
            "returnType": "playdate.geometry.affineTransformTransform"
        },
        "playdate.geometry.affineTransform:skew(sx, sy)": {
            "signature": "playdate.geometry.affineTransform:skew(sx, sy)",
            "parameters": [
                {
                    "name": "sx",
                    "type": "number"
                },
                {
                    "name": "sy",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.affineTransform:skewedBy(sx, sy)": {
            "signature": "playdate.geometry.affineTransform:skewedBy(sx, sy)",
            "parameters": [
                {
                    "name": "sx",
                    "type": "number"
                },
                {
                    "name": "sy",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.affineTransformTransform"
        },
        "playdate.geometry.affineTransform:transformPoint(p)": {
            "signature": "playdate.geometry.affineTransform:transformPoint(p)",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.point"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.affineTransform:transformedPoint(p)": {
            "signature": "playdate.geometry.affineTransform:transformedPoint(p)",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.point"
                }
            ],
            "returnType": "playdate.geometry.point"
        },
        "playdate.geometry.affineTransform:transformXY(x, y)": {
            "signature": "playdate.geometry.affineTransform:transformXY(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.geometry.affineTransform:transformLineSegment(ls)": {
            "signature": "playdate.geometry.affineTransform:transformLineSegment(ls)",
            "parameters": [
                {
                    "name": "ls",
                    "type": "playdate.geometry.lineSegmentnt"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.affineTransform:transformedLineSegment(ls)": {
            "signature": "playdate.geometry.affineTransform:transformedLineSegment(ls)",
            "parameters": [
                {
                    "name": "ls",
                    "type": "playdate.geometry.lineSegmentnt"
                }
            ],
            "returnType": "playdate.geometry.lineSegmentnt"
        },
        "playdate.geometry.affineTransform:transformAABB(r)": {
            "signature": "playdate.geometry.affineTransform:transformAABB(r)",
            "parameters": [
                {
                    "name": "r",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.affineTransform:transformedAABB(r)": {
            "signature": "playdate.geometry.affineTransform:transformedAABB(r)",
            "parameters": [
                {
                    "name": "r",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "playdate.geometry.rect"
        },
        "playdate.geometry.affineTransform:transformPolygon(p)": {
            "signature": "playdate.geometry.affineTransform:transformPolygon(p)",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.polygon"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.affineTransform:transformedPolygon(p)": {
            "signature": "playdate.geometry.affineTransform:transformedPolygon(p)",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.polygon"
                }
            ],
            "returnType": "playdate.geometry.polygon"
        },
        "playdate.geometry.arc.new(x, y, radius, startAngle, endAngle, [direction])": {
            "signature": "playdate.geometry.arc.new(x, y, radius, startAngle, endAngle, [direction])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "radius",
                    "type": "number"
                },
                {
                    "name": "startAngle",
                    "type": "number"
                },
                {
                    "name": "endAngle",
                    "type": "number"
                },
                {
                    "name": "direction",
                    "type": "boolean"
                }
            ],
            "returnType": "playdate.geometry.arc"
        },
        "playdate.geometry.arc:copy()": {
            "signature": "playdate.geometry.arc:copy()",
            "parameters": [],
            "returnType": "playdate.geometry.arc"
        },
        "playdate.geometry.arc:length()": {
            "signature": "playdate.geometry.arc:length()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.geometry.arc:isClockwise()": {
            "signature": "playdate.geometry.arc:isClockwise()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.geometry.arc:setIsClockwise(flag)": {
            "signature": "playdate.geometry.arc:setIsClockwise(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.arc:pointOnArc(distance, [extend])": {
            "signature": "playdate.geometry.arc:pointOnArc(distance, [extend])",
            "parameters": [
                {
                    "name": "distance",
                    "type": "number"
                },
                {
                    "name": "extend",
                    "type": "boolean"
                }
            ],
            "returnType": "playdate.geometry.point"
        },
        "playdate.geometry.lineSegment.new(x1, y1, x2, y2)": {
            "signature": "playdate.geometry.lineSegment.new(x1, y1, x2, y2)",
            "parameters": [
                {
                    "name": "x1",
                    "type": "number"
                },
                {
                    "name": "y1",
                    "type": "number"
                },
                {
                    "name": "x2",
                    "type": "number"
                },
                {
                    "name": "y2",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.lineSegmentnt"
        },
        "playdate.geometry.lineSegment.fast_intersection(x1, y1, x2, y2, x3, y3, x4, y4)": {
            "signature": "playdate.geometry.lineSegment.fast_intersection(x1, y1, x2, y2, x3, y3, x4, y4)",
            "parameters": [
                {
                    "name": "x1",
                    "type": "number"
                },
                {
                    "name": "y1",
                    "type": "number"
                },
                {
                    "name": "x2",
                    "type": "number"
                },
                {
                    "name": "y2",
                    "type": "number"
                },
                {
                    "name": "x3",
                    "type": "number"
                },
                {
                    "name": "y3",
                    "type": "number"
                },
                {
                    "name": "x4",
                    "type": "number"
                },
                {
                    "name": "y4",
                    "type": "number"
                }
            ],
            "returnType": "LuaMultiReturn<[boolean, number]>"
        },
        "playdate.geometry.lineSegment:copy()": {
            "signature": "playdate.geometry.lineSegment:copy()",
            "parameters": [],
            "returnType": "playdate.geometry.lineSegmentnt"
        },
        "playdate.geometry.lineSegment:unpack()": {
            "signature": "playdate.geometry.lineSegment:unpack()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number, number, number]>"
        },
        "playdate.geometry.lineSegment:length()": {
            "signature": "playdate.geometry.lineSegment:length()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.geometry.lineSegment:offset(dx, dy)": {
            "signature": "playdate.geometry.lineSegment:offset(dx, dy)",
            "parameters": [
                {
                    "name": "dx",
                    "type": "number"
                },
                {
                    "name": "dy",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.lineSegment:offsetBy(dx, dy)": {
            "signature": "playdate.geometry.lineSegment:offsetBy(dx, dy)",
            "parameters": [
                {
                    "name": "dx",
                    "type": "number"
                },
                {
                    "name": "dy",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.lineSegmentnt"
        },
        "playdate.geometry.lineSegment:midPoint()": {
            "signature": "playdate.geometry.lineSegment:midPoint()",
            "parameters": [],
            "returnType": "playdate.geometry.point"
        },
        "playdate.geometry.lineSegment:pointOnLine(distance, [extend])": {
            "signature": "playdate.geometry.lineSegment:pointOnLine(distance, [extend])",
            "parameters": [
                {
                    "name": "distance",
                    "type": "number"
                },
                {
                    "name": "extend",
                    "type": "boolean"
                }
            ],
            "returnType": "playdate.geometry.point"
        },
        "playdate.geometry.lineSegment:segmentVector()": {
            "signature": "playdate.geometry.lineSegment:segmentVector()",
            "parameters": [],
            "returnType": "playdate.geometry.vector2D"
        },
        "playdate.geometry.lineSegment:closestPointOnLineToPoint(p)": {
            "signature": "playdate.geometry.lineSegment:closestPointOnLineToPoint(p)",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.point"
                }
            ],
            "returnType": "playdate.geometry.point"
        },
        "playdate.geometry.lineSegment:intersectsLineSegment(ls)": {
            "signature": "playdate.geometry.lineSegment:intersectsLineSegment(ls)",
            "parameters": [
                {
                    "name": "ls",
                    "type": "playdate.geometry.lineSegmentnt"
                }
            ],
            "returnType": "LuaMultiReturn<[false, undefined]> | LuaMultiReturn<[true, playdate.geometry.point]>"
        },
        "playdate.geometry.lineSegment:intersectsPolygon(poly)": {
            "signature": "playdate.geometry.lineSegment:intersectsPolygon(poly)",
            "parameters": [
                {
                    "name": "poly",
                    "type": "playdate.geometry.polygon"
                }
            ],
            "returnType": "LuaMultiReturn<[boolean, number]>"
        },
        "playdate.geometry.lineSegment:intersectsRect(rect)": {
            "signature": "playdate.geometry.lineSegment:intersectsRect(rect)",
            "parameters": [
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "LuaMultiReturn<[boolean, number]>"
        },
        "playdate.geometry.point.new(x, y)": {
            "signature": "playdate.geometry.point.new(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.point"
        },
        "playdate.geometry.point:copy()": {
            "signature": "playdate.geometry.point:copy()",
            "parameters": [],
            "returnType": "playdate.geometry.point"
        },
        "playdate.geometry.point:unpack()": {
            "signature": "playdate.geometry.point:unpack()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.geometry.point:offset(dx, dy)": {
            "signature": "playdate.geometry.point:offset(dx, dy)",
            "parameters": [
                {
                    "name": "dx",
                    "type": "number"
                },
                {
                    "name": "dy",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.point:offsetBy(dx, dy)": {
            "signature": "playdate.geometry.point:offsetBy(dx, dy)",
            "parameters": [
                {
                    "name": "dx",
                    "type": "number"
                },
                {
                    "name": "dy",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.point"
        },
        "playdate.geometry.point:squaredDistanceToPoint(p)": {
            "signature": "playdate.geometry.point:squaredDistanceToPoint(p)",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.point"
                }
            ],
            "returnType": "number"
        },
        "playdate.geometry.point:distanceToPoint(p)": {
            "signature": "playdate.geometry.point:distanceToPoint(p)",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.point"
                }
            ],
            "returnType": "number"
        },
        "playdate.geometry.polygon.new(x1, y1, x2, y2, ..., xn, yn)": {
            "signature": "playdate.geometry.polygon.new(x1, y1, x2, y2, ..., xn, yn)",
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "coordinates",
                    "type": "number",
                    "overrideOptions": {
                        "isRestParameter": true
                    }
                }
            ],
            "returnType": "playdate.geometry.polygon"
        },
        "playdate.geometry.polygon.new(p1, p2, ..., pn)": {
            "signature": "playdate.geometry.polygon.new(p1, p2, ..., pn)",
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "points",
                    "type": "playdate.geometry.point",
                    "overrideOptions": {
                        "isRestParameter": true
                    }
                }
            ],
            "returnType": "playdate.geometry.polygon"
        },
        "playdate.geometry.polygon.new(numberOfVertices)": {
            "signature": "playdate.geometry.polygon.new(numberOfVertices)",
            "parameters": [
                {
                    "name": "numberOfVertices",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.polygon"
        },
        "playdate.geometry.polygon:copy()": {
            "signature": "playdate.geometry.polygon:copy()",
            "parameters": [],
            "returnType": "playdate.geometry.polygon"
        },
        "playdate.geometry.polygon:close()": {
            "signature": "playdate.geometry.polygon:close()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.geometry.polygon:isClosed()": {
            "signature": "playdate.geometry.polygon:isClosed()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.geometry.polygon:containsPoint(p, [fillRule])": {
            "signature": "playdate.geometry.polygon:containsPoint(p, [fillRule])",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.point"
                },
                {
                    "name": "fillRule",
                    "type": "PlaydatePolygonFill",
                    "overrideOptions": {
                        "initializer": "PlaydatePolygonFill.EvenOdd"
                    }
                }
            ],
            "returnType": "boolean"
        },
        "playdate.geometry.polygon:containsPoint(x, y, [fillRule])": {
            "signature": "playdate.geometry.polygon:containsPoint(x, y, [fillRule])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "fillRule",
                    "type": "PlaydatePolygonFill",
                    "overrideOptions": {
                        "initializer": "PlaydatePolygonFill.EvenOdd"
                    }
                }
            ],
            "returnType": "boolean"
        },
        "playdate.geometry.polygon:getBounds()": {
            "signature": "playdate.geometry.polygon:getBounds()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number, number, number]>"
        },
        "playdate.geometry.polygon:getBoundsRect()": {
            "signature": "playdate.geometry.polygon:getBoundsRect()",
            "parameters": [],
            "returnType": "playdate.geometry.rect"
        },
        "playdate.geometry.polygon:count()": {
            "signature": "playdate.geometry.polygon:count()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.geometry.polygon:length()": {
            "signature": "playdate.geometry.polygon:length()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.geometry.polygon:setPointAt(n, x, y)": {
            "signature": "playdate.geometry.polygon:setPointAt(n, x, y)",
            "parameters": [
                {
                    "name": "n",
                    "type": "number"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.polygon:getPointAt(n)": {
            "signature": "playdate.geometry.polygon:getPointAt(n)",
            "parameters": [
                {
                    "name": "n",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.point"
        },
        "playdate.geometry.polygon:intersects(p)": {
            "signature": "playdate.geometry.polygon:intersects(p)",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.polygon"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.geometry.polygon:pointOnPolygon(distance, [extend])": {
            "signature": "playdate.geometry.polygon:pointOnPolygon(distance, [extend])",
            "parameters": [
                {
                    "name": "distance",
                    "type": "number"
                },
                {
                    "name": "extend",
                    "type": "boolean"
                }
            ],
            "returnType": "playdate.geometry.point"
        },
        "playdate.geometry.polygon:translate(dx, dy)": {
            "signature": "playdate.geometry.polygon:translate(dx, dy)",
            "parameters": [
                {
                    "name": "dx",
                    "type": "number"
                },
                {
                    "name": "dy",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.rect.new(x, y, width, height)": {
            "signature": "playdate.geometry.rect.new(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.rect"
        },
        "playdate.geometry.rect.fast_intersection(x1, y1, w1, h1, x2, y2, w2, h2)": {
            "signature": "playdate.geometry.rect.fast_intersection(x1, y1, w1, h1, x2, y2, w2, h2)",
            "parameters": [
                {
                    "name": "x1",
                    "type": "number"
                },
                {
                    "name": "y1",
                    "type": "number"
                },
                {
                    "name": "w1",
                    "type": "number"
                },
                {
                    "name": "h1",
                    "type": "number"
                },
                {
                    "name": "x2",
                    "type": "number"
                },
                {
                    "name": "y2",
                    "type": "number"
                },
                {
                    "name": "w2",
                    "type": "number"
                },
                {
                    "name": "h2",
                    "type": "number"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number, number, number]> | [number, number, number, number][]"
        },
        "playdate.geometry.rect.fast_union(x1, y1, w1, h1, x2, y2, w2, h2)": {
            "signature": "playdate.geometry.rect.fast_union(x1, y1, w1, h1, x2, y2, w2, h2)",
            "parameters": [
                {
                    "name": "x1",
                    "type": "number"
                },
                {
                    "name": "y1",
                    "type": "number"
                },
                {
                    "name": "w1",
                    "type": "number"
                },
                {
                    "name": "h1",
                    "type": "number"
                },
                {
                    "name": "x2",
                    "type": "number"
                },
                {
                    "name": "y2",
                    "type": "number"
                },
                {
                    "name": "w2",
                    "type": "number"
                },
                {
                    "name": "h2",
                    "type": "number"
                }
            ],
            "returnType": "[number, number, number, number][]"
        },
        "playdate.geometry.rect:copy()": {
            "signature": "playdate.geometry.rect:copy()",
            "parameters": [],
            "returnType": "playdate.geometry.rect"
        },
        "playdate.geometry.rect:toPolygon()": {
            "signature": "playdate.geometry.rect:toPolygon()",
            "parameters": [],
            "returnType": "playdate.geometry.polygon"
        },
        "playdate.geometry.rect:unpack()": {
            "signature": "playdate.geometry.rect:unpack()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number, number, number]>"
        },
        "playdate.geometry.rect:isEmpty()": {
            "signature": "playdate.geometry.rect:isEmpty()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.geometry.rect:isEqual(r2)": {
            "signature": "playdate.geometry.rect:isEqual(r2)",
            "parameters": [
                {
                    "name": "r2",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.geometry.rect:intersects(r2)": {
            "signature": "playdate.geometry.rect:intersects(r2)",
            "parameters": [
                {
                    "name": "r2",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.geometry.rect:intersection(r2)": {
            "signature": "playdate.geometry.rect:intersection(r2)",
            "parameters": [
                {
                    "name": "r2",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "playdate.geometry.rect"
        },
        "playdate.geometry.rect:union(r2)": {
            "signature": "playdate.geometry.rect:union(r2)",
            "parameters": [
                {
                    "name": "r2",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "playdate.geometry.rect"
        },
        "playdate.geometry.rect:inset(dx, dy)": {
            "signature": "playdate.geometry.rect:inset(dx, dy)",
            "parameters": [
                {
                    "name": "dx",
                    "type": "number"
                },
                {
                    "name": "dy",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.rect:insetBy(dx, dy)": {
            "signature": "playdate.geometry.rect:insetBy(dx, dy)",
            "parameters": [
                {
                    "name": "dx",
                    "type": "number"
                },
                {
                    "name": "dy",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.rect"
        },
        "playdate.geometry.rect:offset(dx, dy)": {
            "signature": "playdate.geometry.rect:offset(dx, dy)",
            "parameters": [
                {
                    "name": "dx",
                    "type": "number"
                },
                {
                    "name": "dy",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.rect:offsetBy(dx, dy)": {
            "signature": "playdate.geometry.rect:offsetBy(dx, dy)",
            "parameters": [
                {
                    "name": "dx",
                    "type": "number"
                },
                {
                    "name": "dy",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.rect"
        },
        "playdate.geometry.rect:containsRect(r2)": {
            "signature": "playdate.geometry.rect:containsRect(r2)",
            "parameters": [
                {
                    "name": "r2",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.geometry.rect:containsRect(x, y, width, height)": {
            "signature": "playdate.geometry.rect:containsRect(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.geometry.rect:containsPoint(p)": {
            "signature": "playdate.geometry.rect:containsPoint(p)",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.point"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.geometry.rect:containsPoint(x, y)": {
            "signature": "playdate.geometry.rect:containsPoint(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.geometry.rect:centerPoint()": {
            "signature": "playdate.geometry.rect:centerPoint()",
            "parameters": [],
            "returnType": "playdate.geometry.point"
        },
        "playdate.geometry.rect:flipRelativeToRect(r2, flip)": {
            "signature": "playdate.geometry.rect:flipRelativeToRect(r2, flip)",
            "parameters": [
                {
                    "name": "r2",
                    "type": "playdate.geometry.rect"
                },
                {
                    "name": "flip",
                    "type": "PlaydateFlip"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.size.new(width, height)": {
            "signature": "playdate.geometry.size.new(width, height)",
            "parameters": [
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.size"
        },
        "playdate.geometry.size:copy()": {
            "signature": "playdate.geometry.size:copy()",
            "parameters": [],
            "returnType": "playdate.geometry.size"
        },
        "playdate.geometry.size:unpack()": {
            "signature": "playdate.geometry.size:unpack()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.geometry.vector2D.new(x, y)": {
            "signature": "playdate.geometry.vector2D.new(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.vector2D"
        },
        "playdate.geometry.vector2D.newPolar(length, angle)": {
            "signature": "playdate.geometry.vector2D.newPolar(length, angle)",
            "parameters": [
                {
                    "name": "length",
                    "type": "number"
                },
                {
                    "name": "angle",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.vector2D"
        },
        "playdate.geometry.vector2D:copy()": {
            "signature": "playdate.geometry.vector2D:copy()",
            "parameters": [],
            "returnType": "playdate.geometry.vector2D"
        },
        "playdate.geometry.vector2D:unpack()": {
            "signature": "playdate.geometry.vector2D:unpack()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.geometry.vector2D:addVector(v)": {
            "signature": "playdate.geometry.vector2D:addVector(v)",
            "parameters": [
                {
                    "name": "v",
                    "type": "playdate.geometry.vector2D"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.vector2D:scale(s)": {
            "signature": "playdate.geometry.vector2D:scale(s)",
            "parameters": [
                {
                    "name": "s",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.vector2D:scaledBy(s)": {
            "signature": "playdate.geometry.vector2D:scaledBy(s)",
            "parameters": [
                {
                    "name": "s",
                    "type": "number"
                }
            ],
            "returnType": "playdate.geometry.vector2D"
        },
        "playdate.geometry.vector2D:normalize()": {
            "signature": "playdate.geometry.vector2D:normalize()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.geometry.vector2D:normalized()": {
            "signature": "playdate.geometry.vector2D:normalized()",
            "parameters": [],
            "returnType": "playdate.geometry.vector2D"
        },
        "playdate.geometry.vector2D:dotProduct(v)": {
            "signature": "playdate.geometry.vector2D:dotProduct(v)",
            "parameters": [
                {
                    "name": "v",
                    "type": "playdate.geometry.vector2D"
                }
            ],
            "returnType": "number"
        },
        "playdate.geometry.vector2D:magnitude()": {
            "signature": "playdate.geometry.vector2D:magnitude()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.geometry.vector2D:magnitudeSquared()": {
            "signature": "playdate.geometry.vector2D:magnitudeSquared()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.geometry.vector2D:projectAlong(v)": {
            "signature": "playdate.geometry.vector2D:projectAlong(v)",
            "parameters": [
                {
                    "name": "v",
                    "type": "playdate.geometry.vector2D"
                }
            ],
            "returnType": "void"
        },
        "playdate.geometry.vector2D:projectedAlong(v)": {
            "signature": "playdate.geometry.vector2D:projectedAlong(v)",
            "parameters": [
                {
                    "name": "v",
                    "type": "playdate.geometry.vector2D"
                }
            ],
            "returnType": "playdate.geometry.vector2D"
        },
        "playdate.geometry.vector2D:angleBetween(v)": {
            "signature": "playdate.geometry.vector2D:angleBetween(v)",
            "parameters": [
                {
                    "name": "v",
                    "type": "playdate.geometry.vector2D"
                }
            ],
            "returnType": "number"
        },
        "playdate.geometry.vector2D:leftNormal()": {
            "signature": "playdate.geometry.vector2D:leftNormal()",
            "parameters": [],
            "returnType": "playdate.geometry.vector2D"
        },
        "playdate.geometry.vector2D:rightNormal()": {
            "signature": "playdate.geometry.vector2D:rightNormal()",
            "parameters": [],
            "returnType": "playdate.geometry.vector2D"
        },
        "playdate.graphics.pushContext([image])": {
            "signature": "playdate.graphics.pushContext([image])",
            "parameters": [
                {
                    "name": "image",
                    "type": "playdate.graphics.image"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.popContext()": {
            "signature": "playdate.graphics.popContext()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.clear([color])": {
            "signature": "playdate.graphics.clear([color])",
            "parameters": [
                {
                    "name": "color",
                    "type": "PlaydateColor"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.imageSizeAtPath(path)": {
            "signature": "playdate.graphics.imageSizeAtPath(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.checkAlphaCollision(image1, x1, y1, flip1, image2, x2, y2, flip2)": {
            "signature": "playdate.graphics.checkAlphaCollision(image1, x1, y1, flip1, image2, x2, y2, flip2)",
            "parameters": [
                {
                    "name": "image1",
                    "type": "playdate.graphics.image"
                },
                {
                    "name": "x1",
                    "type": "number"
                },
                {
                    "name": "y1",
                    "type": "number"
                },
                {
                    "name": "flip1",
                    "type": "PlaydateFlip"
                },
                {
                    "name": "image2",
                    "type": "playdate.graphics.image"
                },
                {
                    "name": "x2",
                    "type": "number"
                },
                {
                    "name": "y2",
                    "type": "number"
                },
                {
                    "name": "flip2",
                    "type": "PlaydateFlip"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.graphics.setColor(color)": {
            "signature": "playdate.graphics.setColor(color)",
            "parameters": [
                {
                    "name": "color",
                    "type": "PlaydateColor"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.getColor()": {
            "signature": "playdate.graphics.getColor()",
            "parameters": [],
            "returnType": "PlaydateColor"
        },
        "playdate.graphics.setBackgroundColor(color)": {
            "signature": "playdate.graphics.setBackgroundColor(color)",
            "parameters": [
                {
                    "name": "color",
                    "type": "PlaydateColor"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.getBackgroundColor()": {
            "signature": "playdate.graphics.getBackgroundColor()",
            "parameters": [],
            "returnType": "PlaydateColor"
        },
        "playdate.graphics.setPattern(pattern)": {
            "signature": "playdate.graphics.setPattern(pattern)",
            "parameters": [
                {
                    "name": "pattern",
                    "type": "[number, number, number, number, number, number, number, number]"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.setDitherPattern(alpha, [ditherType])": {
            "signature": "playdate.graphics.setDitherPattern(alpha, [ditherType])",
            "parameters": [
                {
                    "name": "alpha",
                    "type": "number"
                },
                {
                    "name": "ditherType",
                    "type": "PlaydateDitherType"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawLine(x1, y1, x2, y2)": {
            "signature": "playdate.graphics.drawLine(x1, y1, x2, y2)",
            "parameters": [
                {
                    "name": "x1",
                    "type": "number"
                },
                {
                    "name": "y1",
                    "type": "number"
                },
                {
                    "name": "x2",
                    "type": "number"
                },
                {
                    "name": "y2",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawLine(ls)": {
            "signature": "playdate.graphics.drawLine(ls)",
            "parameters": [
                {
                    "name": "ls",
                    "type": "playdate.geometry.lineSegmentnt"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.setLineCapStyle(style)": {
            "signature": "playdate.graphics.setLineCapStyle(style)",
            "parameters": [
                {
                    "name": "style",
                    "type": "PlaydateLineCapStyle"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawPixel(x, y)": {
            "signature": "playdate.graphics.drawPixel(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawRect(x, y, w, h)": {
            "signature": "playdate.graphics.drawRect(x, y, w, h)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "w",
                    "type": "number"
                },
                {
                    "name": "h",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawRect(r)": {
            "signature": "playdate.graphics.drawRect(r)",
            "parameters": [
                {
                    "name": "r",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.fillRect(x, y, width, height)": {
            "signature": "playdate.graphics.fillRect(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.fillRect(r)": {
            "signature": "playdate.graphics.fillRect(r)",
            "parameters": [
                {
                    "name": "r",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawRoundRect(x, y, w, h, radius)": {
            "signature": "playdate.graphics.drawRoundRect(x, y, w, h, radius)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "w",
                    "type": "number"
                },
                {
                    "name": "h",
                    "type": "number"
                },
                {
                    "name": "radius",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawRoundRect(r, radius)": {
            "signature": "playdate.graphics.drawRoundRect(r, radius)",
            "parameters": [
                {
                    "name": "r",
                    "type": "playdate.geometry.rect"
                },
                {
                    "name": "radius",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.fillRoundRect(x, y, w, h, radius)": {
            "signature": "playdate.graphics.fillRoundRect(x, y, w, h, radius)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "w",
                    "type": "number"
                },
                {
                    "name": "h",
                    "type": "number"
                },
                {
                    "name": "radius",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.fillRoundRect(r, radius)": {
            "signature": "playdate.graphics.fillRoundRect(r, radius)",
            "parameters": [
                {
                    "name": "r",
                    "type": "playdate.geometry.rect"
                },
                {
                    "name": "radius",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawArc(arc)": {
            "signature": "playdate.graphics.drawArc(arc)",
            "parameters": [
                {
                    "name": "arc",
                    "type": "playdate.geometry.arc"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawArc(x, y, radius, startAngle, endAngle)": {
            "signature": "playdate.graphics.drawArc(x, y, radius, startAngle, endAngle)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "radius",
                    "type": "number"
                },
                {
                    "name": "startAngle",
                    "type": "number"
                },
                {
                    "name": "endAngle",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawCircleAtPoint(x, y, radius)": {
            "signature": "playdate.graphics.drawCircleAtPoint(x, y, radius)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "radius",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawCircleAtPoint(p, radius)": {
            "signature": "playdate.graphics.drawCircleAtPoint(p, radius)",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.point"
                },
                {
                    "name": "radius",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawCircleInRect(x, y, width, height)": {
            "signature": "playdate.graphics.drawCircleInRect(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawCircleInRect(r)": {
            "signature": "playdate.graphics.drawCircleInRect(r)",
            "parameters": [
                {
                    "name": "r",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.fillCircleAtPoint(x, y, radius)": {
            "signature": "playdate.graphics.fillCircleAtPoint(x, y, radius)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "radius",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.fillCircleAtPoint(p, radius)": {
            "signature": "playdate.graphics.fillCircleAtPoint(p, radius)",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.point"
                },
                {
                    "name": "radius",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.fillCircleInRect(x, y, width, height)": {
            "signature": "playdate.graphics.fillCircleInRect(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.fillCircleInRect(r)": {
            "signature": "playdate.graphics.fillCircleInRect(r)",
            "parameters": [
                {
                    "name": "r",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawEllipseInRect(x, y, width, height, [startAngle, endAngle])": {
            "signature": "playdate.graphics.drawEllipseInRect(x, y, width, height, [startAngle, endAngle])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                },
                {
                    "name": "startAngle",
                    "type": "number"
                },
                {
                    "name": "endAngle",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawEllipseInRect(rect, [startAngle, endAngle])": {
            "signature": "playdate.graphics.drawEllipseInRect(rect, [startAngle, endAngle])",
            "parameters": [
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                },
                {
                    "name": "startAngle",
                    "type": "number"
                },
                {
                    "name": "endAngle",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.fillEllipseInRect(x, y, width, height, [startAngle, endAngle])": {
            "signature": "playdate.graphics.fillEllipseInRect(x, y, width, height, [startAngle, endAngle])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                },
                {
                    "name": "startAngle",
                    "type": "number"
                },
                {
                    "name": "endAngle",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.fillEllipseInRect(rect, [startAngle, endAngle])": {
            "signature": "playdate.graphics.fillEllipseInRect(rect, [startAngle, endAngle])",
            "parameters": [
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                },
                {
                    "name": "startAngle",
                    "type": "number"
                },
                {
                    "name": "endAngle",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawPolygon(p)": {
            "signature": "playdate.graphics.drawPolygon(p)",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.polygon"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawPolygon(x1, y1, x2, y2, [...])": {
            "signature": "playdate.graphics.drawPolygon(x1, y1, x2, y2, [...])",
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "coordinates",
                    "type": "number",
                    "overrideOptions": {
                        "isRestParameter": true
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.fillPolygon(x1, y1, x2, y2, [...])": {
            "signature": "playdate.graphics.fillPolygon(x1, y1, x2, y2, [...])",
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "coordinates",
                    "type": "number",
                    "overrideOptions": {
                        "isRestParameter": true
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.fillPolygon(p)": {
            "signature": "playdate.graphics.fillPolygon(p)",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.polygon"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.setPolygonFillRule(rule)": {
            "signature": "playdate.graphics.setPolygonFillRule(rule)",
            "parameters": [
                {
                    "name": "rule",
                    "type": "PlaydateFillRule"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawTriangle(x1, y1, x2, y2, x3, y3)": {
            "signature": "playdate.graphics.drawTriangle(x1, y1, x2, y2, x3, y3)",
            "parameters": [
                {
                    "name": "x1",
                    "type": "number"
                },
                {
                    "name": "y1",
                    "type": "number"
                },
                {
                    "name": "x2",
                    "type": "number"
                },
                {
                    "name": "y2",
                    "type": "number"
                },
                {
                    "name": "x3",
                    "type": "number"
                },
                {
                    "name": "y3",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.fillTriangle(x1, y1, x2, y2, x3, y3)": {
            "signature": "playdate.graphics.fillTriangle(x1, y1, x2, y2, x3, y3)",
            "parameters": [
                {
                    "name": "x1",
                    "type": "number"
                },
                {
                    "name": "y1",
                    "type": "number"
                },
                {
                    "name": "x2",
                    "type": "number"
                },
                {
                    "name": "y2",
                    "type": "number"
                },
                {
                    "name": "x3",
                    "type": "number"
                },
                {
                    "name": "y3",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.perlin(x, y, z, repeat, [octaves, persistence])": {
            "signature": "playdate.graphics.perlin(x, y, z, repeat, [octaves, persistence])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "z",
                    "type": "number"
                },
                {
                    "name": "repeat",
                    "type": "number"
                },
                {
                    "name": "octaves",
                    "type": "number"
                },
                {
                    "name": "persistence",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.perlinArray(count, x, dx, [y, dy, z, dz, repeat, octaves, persistence])": {
            "signature": "playdate.graphics.perlinArray(count, x, dx, [y, dy, z, dz, repeat, octaves, persistence])",
            "parameters": [
                {
                    "name": "count",
                    "type": "number"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "dx",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "dy",
                    "type": "number"
                },
                {
                    "name": "z",
                    "type": "number"
                },
                {
                    "name": "dz",
                    "type": "number"
                },
                {
                    "name": "repeat",
                    "type": "number"
                },
                {
                    "name": "octaves",
                    "type": "number"
                },
                {
                    "name": "persistence",
                    "type": "number"
                }
            ],
            "returnType": "number[]"
        },
        "playdate.graphics.generateQRCode(stringToEncode, desiredEdgeDimension, callback)": {
            "signature": "playdate.graphics.generateQRCode(stringToEncode, desiredEdgeDimension, callback)",
            "parameters": [
                {
                    "name": "stringToEncode",
                    "type": "string"
                },
                {
                    "name": "desiredEdgeDimension",
                    "type": "number"
                },
                {
                    "name": "callback",
                    "type": "() => void"
                }
            ],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.drawSineWave(startX, startY, endX, endY, startAmplitude, endAmplitude, period, [phaseShift])": {
            "signature": "playdate.graphics.drawSineWave(startX, startY, endX, endY, startAmplitude, endAmplitude, period, [phaseShift])",
            "parameters": [
                {
                    "name": "startX",
                    "type": "number"
                },
                {
                    "name": "startY",
                    "type": "number"
                },
                {
                    "name": "endX",
                    "type": "number"
                },
                {
                    "name": "endY",
                    "type": "number"
                },
                {
                    "name": "startAmplitude",
                    "type": "number"
                },
                {
                    "name": "endAmplitude",
                    "type": "number"
                },
                {
                    "name": "period",
                    "type": "number"
                },
                {
                    "name": "phaseShift",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.setClipRect(x, y, width, height)": {
            "signature": "playdate.graphics.setClipRect(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.setClipRect(rect)": {
            "signature": "playdate.graphics.setClipRect(rect)",
            "parameters": [
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.getClipRect()": {
            "signature": "playdate.graphics.getClipRect()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number, number, number]>"
        },
        "playdate.graphics.setScreenClipRect(x, y, width, height)": {
            "signature": "playdate.graphics.setScreenClipRect(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.setScreenClipRect(rect)": {
            "signature": "playdate.graphics.setScreenClipRect(rect)",
            "parameters": [
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.getScreenClipRect()": {
            "signature": "playdate.graphics.getScreenClipRect()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number, number, number]>"
        },
        "playdate.graphics.clearClipRect()": {
            "signature": "playdate.graphics.clearClipRect()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.setStencilImage(image, [tile])": {
            "signature": "playdate.graphics.setStencilImage(image, [tile])",
            "parameters": [
                {
                    "name": "image",
                    "type": "playdate.graphics.image"
                },
                {
                    "name": "tile",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.setStencilPattern(pattern)": {
            "signature": "playdate.graphics.setStencilPattern(pattern)",
            "parameters": [
                {
                    "name": "pattern",
                    "type": "[number, number, number, number, number, number, number, number]"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.setStencilPattern(row1, row2, row3, row4, row5, row6, row7, row8)": {
            "signature": "playdate.graphics.setStencilPattern(row1, row2, row3, row4, row5, row6, row7, row8)",
            "parameters": [
                {
                    "name": "row1",
                    "type": "number"
                },
                {
                    "name": "row2",
                    "type": "number"
                },
                {
                    "name": "row3",
                    "type": "number"
                },
                {
                    "name": "row4",
                    "type": "number"
                },
                {
                    "name": "row5",
                    "type": "number"
                },
                {
                    "name": "row6",
                    "type": "number"
                },
                {
                    "name": "row7",
                    "type": "number"
                },
                {
                    "name": "row8",
                    "type": "number"
                }
            ],
            "returnType": "number"
        },
        "playdate.graphics.setStencilPattern(level, [ditherType])": {
            "signature": "playdate.graphics.setStencilPattern(level, [ditherType])",
            "parameters": [
                {
                    "name": "level",
                    "type": "number"
                },
                {
                    "name": "ditherType",
                    "type": "PlaydateDitherType"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.clearStencil()": {
            "signature": "playdate.graphics.clearStencil()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.clearStencilImage()": {
            "signature": "playdate.graphics.clearStencilImage()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.setImageDrawMode(mode)": {
            "signature": "playdate.graphics.setImageDrawMode(mode)",
            "parameters": [
                {
                    "name": "mode",
                    "type": "PlaydateDrawMode"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.getImageDrawMode()": {
            "signature": "playdate.graphics.getImageDrawMode()",
            "parameters": [],
            "returnType": "PlaydateDrawMode"
        },
        "playdate.graphics.setLineWidth(width)": {
            "signature": "playdate.graphics.setLineWidth(width)",
            "parameters": [
                {
                    "name": "width",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.getLineWidth()": {
            "signature": "playdate.graphics.getLineWidth()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.setStrokeLocation(location)": {
            "signature": "playdate.graphics.setStrokeLocation(location)",
            "parameters": [
                {
                    "name": "location",
                    "type": "PlaydateStrokeLocation"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.getStrokeLocation()": {
            "signature": "playdate.graphics.getStrokeLocation()",
            "parameters": [],
            "returnType": "PlaydateStrokeLocation"
        },
        "playdate.graphics.lockFocus(image)": {
            "signature": "playdate.graphics.lockFocus(image)",
            "parameters": [
                {
                    "name": "image",
                    "type": "playdate.graphics.image"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.unlockFocus()": {
            "signature": "playdate.graphics.unlockFocus()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.setDrawOffset(x, y)": {
            "signature": "playdate.graphics.setDrawOffset(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.getDrawOffset()": {
            "signature": "playdate.graphics.getDrawOffset()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.getDisplayImage()": {
            "signature": "playdate.graphics.getDisplayImage()",
            "parameters": [],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.getWorkingImage()": {
            "signature": "playdate.graphics.getWorkingImage()",
            "parameters": [],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.setStencilPattern({ row1, row2, row3, row4, row5, row6, row7, row8 })": {
            "signature": "playdate.graphics.setStencilPattern({ row1, row2, row3, row4, row5, row6, row7, row8 })",
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "pattern",
                    "type": "[number, number, number, number, number, number, number, number]"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.setFont(font, [variant])": {
            "signature": "playdate.graphics.setFont(font, [variant])",
            "parameters": [
                {
                    "name": "font",
                    "type": "playdate.graphics.font"
                },
                {
                    "name": "variant",
                    "type": "PlaydateFontVariant"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.getFont([variant])": {
            "signature": "playdate.graphics.getFont([variant])",
            "parameters": [
                {
                    "name": "variant",
                    "type": "PlaydateFontVariant"
                }
            ],
            "returnType": "playdate.graphics.font"
        },
        "playdate.graphics.setFontFamily(fontFamily)": {
            "signature": "playdate.graphics.setFontFamily(fontFamily)",
            "parameters": [
                {
                    "name": "fontFamily",
                    "type": "PlaydateFontVariant"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.setFontTracking(pixels)": {
            "signature": "playdate.graphics.setFontTracking(pixels)",
            "parameters": [
                {
                    "name": "pixels",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.getFontTracking()": {
            "signature": "playdate.graphics.getFontTracking()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.getSystemFont([variant])": {
            "signature": "playdate.graphics.getSystemFont([variant])",
            "parameters": [
                {
                    "name": "variant",
                    "type": "PlaydateFontVariant"
                }
            ],
            "returnType": "playdate.graphics.font"
        },
        "playdate.graphics.drawText(text, x, y, [width, height], [fontFamily], [leadingAdjustment], [wrapMode], [alignment])": {
            "signature": "playdate.graphics.drawText(text, x, y, [width, height], [fontFamily], [leadingAdjustment], [wrapMode], [alignment])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                },
                {
                    "name": "fontFamily",
                    "type": "PlaydateFontFamily"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                },
                {
                    "name": "wrapMode",
                    "type": "PlaydateWrapMode"
                },
                {
                    "name": "alignment",
                    "type": "PlaydateTextAlignment"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawText(text, rect, [fontFamily], [leadingAdjustment], [wrapMode], [alignment])": {
            "signature": "playdate.graphics.drawText(text, rect, [fontFamily], [leadingAdjustment], [wrapMode], [alignment])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                },
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                },
                {
                    "name": "fontFamily",
                    "type": "PlaydateFontFamily"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                },
                {
                    "name": "wrapMode",
                    "type": "PlaydateWrapMode"
                },
                {
                    "name": "alignment",
                    "type": "PlaydateTextAlignment"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawLocalizedText(key, x, y, [width, height], [language], [leadingAdjustment], [wrapMode], [alignment])": {
            "signature": "playdate.graphics.drawLocalizedText(key, x, y, [width, height], [language], [leadingAdjustment], [wrapMode], [alignment])",
            "parameters": [
                {
                    "name": "key",
                    "type": "string"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                },
                {
                    "name": "language",
                    "type": "PlaydateLanguage"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                },
                {
                    "name": "wrapMode",
                    "type": "PlaydateWrapMode"
                },
                {
                    "name": "alignment",
                    "type": "PlaydateTextAlignment"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawLocalizedText(key, rect, [language], [leadingAdjustment])": {
            "signature": "playdate.graphics.drawLocalizedText(key, rect, [language], [leadingAdjustment])",
            "parameters": [
                {
                    "name": "key",
                    "type": "string"
                },
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                },
                {
                    "name": "language",
                    "type": "PlaydateLanguage"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.getLocalizedText(key, [language])": {
            "signature": "playdate.graphics.getLocalizedText(key, [language])",
            "parameters": [
                {
                    "name": "key",
                    "type": "string"
                },
                {
                    "name": "language",
                    "type": "PlaydateLanguage"
                }
            ],
            "returnType": "string"
        },
        "playdate.graphics.getTextSize(str, [fontFamily, [leadingAdjustment]])": {
            "signature": "playdate.graphics.getTextSize(str, [fontFamily, [leadingAdjustment]])",
            "parameters": [
                {
                    "name": "str",
                    "type": "string"
                },
                {
                    "name": "fontFamily",
                    "type": "PlaydateFontFamily"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.drawTextAligned(text, x, y, alignment, [leadingAdjustment])": {
            "signature": "playdate.graphics.drawTextAligned(text, x, y, alignment, [leadingAdjustment])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "alignment",
                    "type": "PlaydateTextAlignment"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawTextInRect(text, x, y, width, height, [leadingAdjustment, [truncationString, [alignment, [font]]]])": {
            "signature": "playdate.graphics.drawTextInRect(text, x, y, width, height, [leadingAdjustment, [truncationString, [alignment, [font]]]])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                },
                {
                    "name": "truncationString",
                    "type": "string"
                },
                {
                    "name": "alignment",
                    "type": "PlaydateTextAlignment"
                },
                {
                    "name": "font",
                    "type": "playdate.graphics.font"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number, boolean]>"
        },
        "playdate.graphics.drawTextInRect(text, rect, [leadingAdjustment, [truncationString, [alignment, [font]]]])": {
            "signature": "playdate.graphics.drawTextInRect(text, rect, [leadingAdjustment, [truncationString, [alignment, [font]]]])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                },
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                },
                {
                    "name": "truncationString",
                    "type": "string"
                },
                {
                    "name": "alignment",
                    "type": "PlaydateTextAlignment"
                },
                {
                    "name": "font",
                    "type": "playdate.graphics.font"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number, boolean]>"
        },
        "playdate.graphics.drawLocalizedTextAligned(text, x, y, alignment, [language, [leadingAdjustment]])": {
            "signature": "playdate.graphics.drawLocalizedTextAligned(text, x, y, alignment, [language, [leadingAdjustment]])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "alignment",
                    "type": "PlaydateTextAlignment"
                },
                {
                    "name": "language",
                    "type": "PlaydateLanguage"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.drawLocalizedTextInRect(text, x, y, width, height, [leadingAdjustment, [truncationString, [alignment, [font, [language]]]]])": {
            "signature": "playdate.graphics.drawLocalizedTextInRect(text, x, y, width, height, [leadingAdjustment, [truncationString, [alignment, [font, [language]]]]])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                },
                {
                    "name": "truncationString",
                    "type": "string"
                },
                {
                    "name": "alignment",
                    "type": "PlaydateTextAlignment"
                },
                {
                    "name": "font",
                    "type": "playdate.graphics.font"
                },
                {
                    "name": "language",
                    "type": "PlaydateLanguage"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number, boolean]>"
        },
        "playdate.graphics.drawLocalizedTextInRect(text, rect, [leadingAdjustment, [truncationString, [alignment, [font, [language]]]]])": {
            "signature": "playdate.graphics.drawLocalizedTextInRect(text, rect, [leadingAdjustment, [truncationString, [alignment, [font, [language]]]]])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                },
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                },
                {
                    "name": "truncationString",
                    "type": "string"
                },
                {
                    "name": "alignment",
                    "type": "PlaydateTextAlignment"
                },
                {
                    "name": "font",
                    "type": "playdate.graphics.font"
                },
                {
                    "name": "language",
                    "type": "PlaydateLanguage"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number, boolean]>"
        },
        "playdate.graphics.getTextSizeForMaxWidth(text, maxWidth, [leadingAdjustment, [font]]])": {
            "signature": "playdate.graphics.getTextSizeForMaxWidth(text, maxWidth, [leadingAdjustment, [font]]])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                },
                {
                    "name": "maxWidth",
                    "type": "number"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                },
                {
                    "name": "font",
                    "type": "playdate.graphics.font"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.imageWithText(text, maxWidth, maxHeight, [backgroundColor, [leadingAdjustment, [truncationString, [alignment, [font]]]]])": {
            "signature": "playdate.graphics.imageWithText(text, maxWidth, maxHeight, [backgroundColor, [leadingAdjustment, [truncationString, [alignment, [font]]]]])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                },
                {
                    "name": "maxWidth",
                    "type": "number"
                },
                {
                    "name": "maxHeight",
                    "type": "number"
                },
                {
                    "name": "backgroundColor",
                    "type": "PlaydateColor"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                },
                {
                    "name": "truncationString",
                    "type": "string"
                },
                {
                    "name": "alignment",
                    "type": "PlaydateTextAlignment"
                },
                {
                    "name": "font",
                    "type": "playdate.graphics.font"
                }
            ],
            "returnType": "LuaMultiReturn<[playdate.graphics.image, boolean]>"
        },
        "playdate.graphics.image.new(width, height, [bgcolor])": {
            "signature": "playdate.graphics.image.new(width, height, [bgcolor])",
            "parameters": [
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                },
                {
                    "name": "bgcolor",
                    "type": "PlaydateColor"
                }
            ],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.image.new(path)": {
            "signature": "playdate.graphics.image.new(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.image:load(path)": {
            "signature": "playdate.graphics.image:load(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "LuaMultiReturn<[true, undefined]> | LuaMultiReturn<[false, string]>"
        },
        "playdate.graphics.image:copy()": {
            "signature": "playdate.graphics.image:copy()",
            "parameters": [],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.image:getSize()": {
            "signature": "playdate.graphics.image:getSize()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.image:draw(x, y, [flip, [sourceRect]])": {
            "signature": "playdate.graphics.image:draw(x, y, [flip, [sourceRect]])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "flip",
                    "type": "PlaydateFlip"
                },
                {
                    "name": "sourceRect",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:draw(p, [flip, [sourceRect]])": {
            "signature": "playdate.graphics.image:draw(p, [flip, [sourceRect]])",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.point"
                },
                {
                    "name": "flip",
                    "type": "PlaydateFlip"
                },
                {
                    "name": "sourceRect",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:drawAnchored(x, y, ax, ay, [flip])": {
            "signature": "playdate.graphics.image:drawAnchored(x, y, ax, ay, [flip])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "ax",
                    "type": "number"
                },
                {
                    "name": "ay",
                    "type": "number"
                },
                {
                    "name": "flip",
                    "type": "PlaydateFlip"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:drawCentered(x, y, [flip])": {
            "signature": "playdate.graphics.image:drawCentered(x, y, [flip])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "flip",
                    "type": "PlaydateFlip"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:drawIgnoringOffset(x, y, [flip])": {
            "signature": "playdate.graphics.image:drawIgnoringOffset(x, y, [flip])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "flip",
                    "type": "PlaydateFlip"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:drawIgnoringOffset(p, [flip])": {
            "signature": "playdate.graphics.image:drawIgnoringOffset(p, [flip])",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.point"
                },
                {
                    "name": "flip",
                    "type": "PlaydateFlip"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:clear(color)": {
            "signature": "playdate.graphics.image:clear(color)",
            "parameters": [
                {
                    "name": "color",
                    "type": "PlaydateColor"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:sample(x, y)": {
            "signature": "playdate.graphics.image:sample(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "Omit<PlaydateColor, PlaydateColor.XOR>"
        },
        "playdate.graphics.image:drawRotated(x, y, angle, [scale, [yscale]])": {
            "signature": "playdate.graphics.image:drawRotated(x, y, angle, [scale, [yscale]])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "angle",
                    "type": "number"
                },
                {
                    "name": "scale",
                    "type": "number"
                },
                {
                    "name": "yscale",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:rotatedImage(angle, [scale, [yscale]])": {
            "signature": "playdate.graphics.image:rotatedImage(angle, [scale, [yscale]])",
            "parameters": [
                {
                    "name": "angle",
                    "type": "number"
                },
                {
                    "name": "scale",
                    "type": "number"
                },
                {
                    "name": "yscale",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.image:drawScaled(x, y, scale, [yscale])": {
            "signature": "playdate.graphics.image:drawScaled(x, y, scale, [yscale])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "scale",
                    "type": "number"
                },
                {
                    "name": "yscale",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:scaledImage(scale, [yscale])": {
            "signature": "playdate.graphics.image:scaledImage(scale, [yscale])",
            "parameters": [
                {
                    "name": "scale",
                    "type": "number"
                },
                {
                    "name": "yscale",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.image:drawWithTransform(xform, x, y)": {
            "signature": "playdate.graphics.image:drawWithTransform(xform, x, y)",
            "parameters": [
                {
                    "name": "xform",
                    "type": "playdate.geometry.affineTransformTransform"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:transformedImage(xform)": {
            "signature": "playdate.graphics.image:transformedImage(xform)",
            "parameters": [
                {
                    "name": "xform",
                    "type": "playdate.geometry.affineTransformTransform"
                }
            ],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.image:drawSampled(x, y, width, height, centerx, centery, dxx, dyx, dxy, dyy, dx, dy, z, tiltAngle, tile)": {
            "signature": "playdate.graphics.image:drawSampled(x, y, width, height, centerx, centery, dxx, dyx, dxy, dyy, dx, dy, z, tiltAngle, tile)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                },
                {
                    "name": "centerx",
                    "type": "number"
                },
                {
                    "name": "centery",
                    "type": "number"
                },
                {
                    "name": "dxx",
                    "type": "number"
                },
                {
                    "name": "dyx",
                    "type": "number"
                },
                {
                    "name": "dxy",
                    "type": "number"
                },
                {
                    "name": "dyy",
                    "type": "number"
                },
                {
                    "name": "dx",
                    "type": "number"
                },
                {
                    "name": "dy",
                    "type": "number"
                },
                {
                    "name": "z",
                    "type": "number"
                },
                {
                    "name": "tiltAngle",
                    "type": "number"
                },
                {
                    "name": "tile",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:setMaskImage(maskImage)": {
            "signature": "playdate.graphics.image:setMaskImage(maskImage)",
            "parameters": [
                {
                    "name": "maskImage",
                    "type": "playdate.graphics.image"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:getMaskImage()": {
            "signature": "playdate.graphics.image:getMaskImage()",
            "parameters": [],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.image:addMask([opaque])": {
            "signature": "playdate.graphics.image:addMask([opaque])",
            "parameters": [
                {
                    "name": "opaque",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:removeMask()": {
            "signature": "playdate.graphics.image:removeMask()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.image:hasMask()": {
            "signature": "playdate.graphics.image:hasMask()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.graphics.image:clearMask([opaque])": {
            "signature": "playdate.graphics.image:clearMask([opaque])",
            "parameters": [
                {
                    "name": "opaque",
                    "type": "number"
                }
            ],
            "returnType": "1 | 0"
        },
        "playdate.graphics.image:drawTiled(x, y, width, height, [flip])": {
            "signature": "playdate.graphics.image:drawTiled(x, y, width, height, [flip])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                },
                {
                    "name": "flip",
                    "type": "PlaydateFlip"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:drawTiled(rect, [flip])": {
            "signature": "playdate.graphics.image:drawTiled(rect, [flip])",
            "parameters": [
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                },
                {
                    "name": "flip",
                    "type": "PlaydateFlip"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:drawBlurred(x, y, radius, numPasses, ditherType, [flip], [xPhase, yPhase])": {
            "signature": "playdate.graphics.image:drawBlurred(x, y, radius, numPasses, ditherType, [flip], [xPhase, yPhase])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "radius",
                    "type": "number"
                },
                {
                    "name": "numPasses",
                    "type": "number"
                },
                {
                    "name": "ditherType",
                    "type": "number"
                },
                {
                    "name": "flip",
                    "type": "PlaydateFlip"
                },
                {
                    "name": "xPhase",
                    "type": "number"
                },
                {
                    "name": "yPhase",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:blurredImage(radius, numPasses, ditherType, [padEdges, [xPhase, yPhase]])": {
            "signature": "playdate.graphics.image:blurredImage(radius, numPasses, ditherType, [padEdges, [xPhase, yPhase]])",
            "parameters": [
                {
                    "name": "radius",
                    "type": "number"
                },
                {
                    "name": "numPasses",
                    "type": "number"
                },
                {
                    "name": "ditherType",
                    "type": "number"
                },
                {
                    "name": "padEdges",
                    "type": "number"
                },
                {
                    "name": "xPhase",
                    "type": "number"
                },
                {
                    "name": "yPhase",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.image:drawFaded(x, y, alpha, ditherType)": {
            "signature": "playdate.graphics.image:drawFaded(x, y, alpha, ditherType)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "alpha",
                    "type": "number"
                },
                {
                    "name": "ditherType",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:fadedImage(alpha, ditherType)": {
            "signature": "playdate.graphics.image:fadedImage(alpha, ditherType)",
            "parameters": [
                {
                    "name": "alpha",
                    "type": "number"
                },
                {
                    "name": "ditherType",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.image:setInverted(flag)": {
            "signature": "playdate.graphics.image:setInverted(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.image:invertedImage()": {
            "signature": "playdate.graphics.image:invertedImage()",
            "parameters": [],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.image:blendWithImage(image, alpha, ditherType)": {
            "signature": "playdate.graphics.image:blendWithImage(image, alpha, ditherType)",
            "parameters": [
                {
                    "name": "image",
                    "type": "playdate.graphics.image"
                },
                {
                    "name": "alpha",
                    "type": "number"
                },
                {
                    "name": "ditherType",
                    "type": "PlaydateDitherType"
                }
            ],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.image:vcrPauseFilterImage()": {
            "signature": "playdate.graphics.image:vcrPauseFilterImage()",
            "parameters": [],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.nineSlice.new(imagePath, innerX, innerY, innerWidth, innerHeight)": {
            "signature": "playdate.graphics.nineSlice.new(imagePath, innerX, innerY, innerWidth, innerHeight)",
            "parameters": [
                {
                    "name": "imagePath",
                    "type": "string"
                },
                {
                    "name": "innerX",
                    "type": "number"
                },
                {
                    "name": "innerY",
                    "type": "number"
                },
                {
                    "name": "innerWidth",
                    "type": "number"
                },
                {
                    "name": "innerHeight",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.nineSlice"
        },
        "playdate.graphics.nineSlice:getSize()": {
            "signature": "playdate.graphics.nineSlice:getSize()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.nineSlice:getMinSize()": {
            "signature": "playdate.graphics.nineSlice:getMinSize()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.nineSlice:drawInRect(x, y, width, height)": {
            "signature": "playdate.graphics.nineSlice:drawInRect(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.nineSlice:drawInRect(rect)": {
            "signature": "playdate.graphics.nineSlice:drawInRect(rect)",
            "parameters": [
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.animation.loop.new([delay, [imageTable, [shouldLoop]]])": {
            "signature": "playdate.graphics.animation.loop.new([delay, [imageTable, [shouldLoop]]])",
            "parameters": [
                {
                    "name": "delay",
                    "type": "number"
                },
                {
                    "name": "imageTable",
                    "type": "playdate.graphics.imagetable"
                },
                {
                    "name": "shouldLoop",
                    "type": "boolean"
                }
            ],
            "returnType": "playdate.graphics.animation.loop"
        },
        "playdate.graphics.animation.loop:draw(x, y, [flip])": {
            "signature": "playdate.graphics.animation.loop:draw(x, y, [flip])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "flip",
                    "type": "PlaydateFlip"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.animation.loop:image()": {
            "signature": "playdate.graphics.animation.loop:image()",
            "parameters": [],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.animation.loop:isValid()": {
            "signature": "playdate.graphics.animation.loop:isValid()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.graphics.animation.loop:setImageTable(imageTable)": {
            "signature": "playdate.graphics.animation.loop:setImageTable(imageTable)",
            "parameters": [
                {
                    "name": "imageTable",
                    "type": "playdate.graphics.imagetable"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.animation.blinker.new([onDuration, [offDuration, [loop, [cycles, [default]]]]])": {
            "signature": "playdate.graphics.animation.blinker.new([onDuration, [offDuration, [loop, [cycles, [default]]]]])",
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "onDuration",
                    "type": "number",
                    "overrideOptions": {
                        "initializer": "200"
                    }
                },
                {
                    "name": "offDuration",
                    "type": "number",
                    "overrideOptions": {
                        "initializer": "200"
                    }
                },
                {
                    "name": "loop",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "false"
                    }
                },
                {
                    "name": "cycles",
                    "type": "number",
                    "overrideOptions": {
                        "initializer": "6"
                    }
                },
                {
                    "name": "_default",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "true"
                    }
                }
            ],
            "returnType": "playdate.graphics.animation.blinker"
        },
        "playdate.graphics.animation.blinker.updateAll()": {
            "signature": "playdate.graphics.animation.blinker.updateAll()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.animation.blinker.stopAll()": {
            "signature": "playdate.graphics.animation.blinker.stopAll()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.animation.blinker:update()": {
            "signature": "playdate.graphics.animation.blinker:update()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.animation.blinker:start([onDuration, [offDuration, [loop, [cycles, [default]]]]])": {
            "signature": "playdate.graphics.animation.blinker:start([onDuration, [offDuration, [loop, [cycles, [default]]]]])",
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "onDuration",
                    "type": "number",
                    "overrideOptions": {
                        "initializer": "200"
                    }
                },
                {
                    "name": "offDuration",
                    "type": "number",
                    "overrideOptions": {
                        "initializer": "200"
                    }
                },
                {
                    "name": "loop",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "false"
                    }
                },
                {
                    "name": "cycles",
                    "type": "number",
                    "overrideOptions": {
                        "initializer": "6"
                    }
                },
                {
                    "name": "_default",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "true"
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.animation.blinker:startLoop()": {
            "signature": "playdate.graphics.animation.blinker:startLoop()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.animation.blinker:stop()": {
            "signature": "playdate.graphics.animation.blinker:stop()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.animation.blinker:remove()": {
            "signature": "playdate.graphics.animation.blinker:remove()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.animator.new(duration, startValue, endValue, [easingFunction, [startTimeOffset]])": {
            "signature": "playdate.graphics.animator.new(duration, startValue, endValue, [easingFunction, [startTimeOffset]])",
            "overrideOptions": {
                "typeParameters": "TSubject extends number | playdate.geometry.point"
            },
            "parameters": [
                {
                    "name": "duration",
                    "type": "number"
                },
                {
                    "name": "startValue",
                    "type": "TSubject"
                },
                {
                    "name": "endValue",
                    "type": "TSubect"
                },
                {
                    "name": "easingFunction",
                    "type": "PlaydateEasingFunction"
                },
                {
                    "name": "startTimeOffset",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.animator<TSubject>"
        },
        "playdate.graphics.animator.new(duration, lineSegment, [easingFunction, [startTimeOffset]])": {
            "signature": "playdate.graphics.animator.new(duration, lineSegment, [easingFunction, [startTimeOffset]])",
            "parameters": [
                {
                    "name": "duration",
                    "type": "number"
                },
                {
                    "name": "lineSegment",
                    "type": "playdate.geometry.lineSegmentnt"
                },
                {
                    "name": "easingFunction",
                    "type": "PlaydateEasingFunction"
                },
                {
                    "name": "startTimeOffset",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.animator"
        },
        "playdate.graphics.animator.new(duration, arc, [easingFunction, [startTimeOffset]])": {
            "signature": "playdate.graphics.animator.new(duration, arc, [easingFunction, [startTimeOffset]])",
            "parameters": [
                {
                    "name": "duration",
                    "type": "number"
                },
                {
                    "name": "arc",
                    "type": "playdate.geometry.arc"
                },
                {
                    "name": "easingFunction",
                    "type": "PlaydateEasingFunction"
                },
                {
                    "name": "startTimeOffset",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.animator"
        },
        "playdate.graphics.animator.new(duration, polygon, [easingFunction, [startTimeOffset]])": {
            "signature": "playdate.graphics.animator.new(duration, polygon, [easingFunction, [startTimeOffset]])",
            "parameters": [
                {
                    "name": "duration",
                    "type": "number"
                },
                {
                    "name": "polygon",
                    "type": "playdate.geometry.polygon"
                },
                {
                    "name": "easingFunction",
                    "type": "PlaydateEasingFunction"
                },
                {
                    "name": "startTimeOffset",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.animator"
        },
        "playdate.graphics.animator.new(durations, parts, easingFunctions, [startTimeOffset])": {
            "signature": "playdate.graphics.animator.new(durations, parts, easingFunctions, [startTimeOffset])",
            "parameters": [
                {
                    "name": "durations",
                    "type": "number"
                },
                {
                    "name": "parts",
                    "type": "(playdate.geometry.lineSegmentnt | playdate.geometry.arc | playdate.geometry.polygon)[]"
                },
                {
                    "name": "easingFunctions",
                    "type": "PlaydateEasingFunction[]"
                },
                {
                    "name": "startTimeOffset",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.animator"
        },
        "playdate.graphics.animator:currentValue()": {
            "signature": "playdate.graphics.animator:currentValue()",
            "parameters": [],
            "returnType": "TSubject"
        },
        "playdate.graphics.animator:valueAtTime(time)": {
            "signature": "playdate.graphics.animator:valueAtTime(time)",
            "parameters": [
                {
                    "name": "time",
                    "type": "number"
                }
            ],
            "returnType": "TSubject"
        },
        "playdate.graphics.animator:progress()": {
            "signature": "playdate.graphics.animator:progress()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.animator:reset([duration])": {
            "signature": "playdate.graphics.animator:reset([duration])",
            "parameters": [
                {
                    "name": "duration",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.animator:ended()": {
            "signature": "playdate.graphics.animator:ended()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.imagetable.new(path)": {
            "signature": "playdate.graphics.imagetable.new(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "playdate.graphics.imagetable"
        },
        "playdate.graphics.imagetable.new(count, [cellsWide], [cellSize])": {
            "signature": "playdate.graphics.imagetable.new(count, [cellsWide], [cellSize])",
            "parameters": [
                {
                    "name": "count",
                    "type": "number"
                },
                {
                    "name": "cellsWide",
                    "type": "number"
                },
                {
                    "name": "cellsize",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.imagetable"
        },
        "playdate.graphics.imagetable:getImage(n)": {
            "signature": "playdate.graphics.imagetable:getImage(n)",
            "parameters": [
                {
                    "name": "n",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.imagetable:getImage(x,y)": {
            "signature": "playdate.graphics.imagetable:getImage(x,y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.image | null"
        },
        "playdate.graphics.imagetable:setImage(n, image)": {
            "signature": "playdate.graphics.imagetable:setImage(n, image)",
            "parameters": [
                {
                    "name": "n",
                    "type": "number"
                },
                {
                    "name": "image",
                    "type": "playdate.graphics.image"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.imagetable:load(path)": {
            "signature": "playdate.graphics.imagetable:load(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "LuaMultiReturn<[true, undefined]> | LuaMultiReturn<[false, string]>"
        },
        "playdate.graphics.imagetable:getLength()": {
            "signature": "playdate.graphics.imagetable:getLength()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.imagetable:getSize()": {
            "signature": "playdate.graphics.imagetable:getSize()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.imagetable:drawImage(n,x,y,[flip])": {
            "signature": "playdate.graphics.imagetable:drawImage(n,x,y,[flip])",
            "parameters": [
                {
                    "name": "n",
                    "type": "number"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "flip",
                    "type": "PlaydateFlip"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.tilemap.new()": {
            "signature": "playdate.graphics.tilemap.new()",
            "parameters": [],
            "returnType": "playdate.graphics.tilemap"
        },
        "playdate.graphics.tilemap:setImageTable(table)": {
            "signature": "playdate.graphics.tilemap:setImageTable(table)",
            "parameters": [
                {
                    "name": "table",
                    "type": "playdate.graphics.imagetable"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.tilemap:setTiles(data, width)": {
            "signature": "playdate.graphics.tilemap:setTiles(data, width)",
            "parameters": [
                {
                    "name": "data",
                    "type": "number[]"
                },
                {
                    "name": "width",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.tilemap:getTiles()": {
            "signature": "playdate.graphics.tilemap:getTiles()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number[], number]>"
        },
        "playdate.graphics.tilemap:draw(x, y, [sourceRect])": {
            "signature": "playdate.graphics.tilemap:draw(x, y, [sourceRect])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "sourceRect",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.tilemap:drawIgnoringOffset(x, y, [sourceRect])": {
            "signature": "playdate.graphics.tilemap:drawIgnoringOffset(x, y, [sourceRect])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "sourceRect",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.tilemap:setTileAtPosition(x, y, index)": {
            "signature": "playdate.graphics.tilemap:setTileAtPosition(x, y, index)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "index",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.tilemap:getTileAtPosition(x, y)": {
            "signature": "playdate.graphics.tilemap:getTileAtPosition(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "number | null"
        },
        "playdate.graphics.tilemap:setSize(width, height)": {
            "signature": "playdate.graphics.tilemap:setSize(width, height)",
            "parameters": [
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.tilemap:getSize()": {
            "signature": "playdate.graphics.tilemap:getSize()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.tilemap:getPixelSize()": {
            "signature": "playdate.graphics.tilemap:getPixelSize()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.tilemap:getTileSize()": {
            "signature": "playdate.graphics.tilemap:getTileSize()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.tilemap:getCollisionRects(emptyIDs)": {
            "signature": "playdate.graphics.tilemap:getCollisionRects(emptyIDs)",
            "parameters": [
                {
                    "name": "emptyIDs",
                    "type": "number[]"
                }
            ],
            "returnType": "playdate.geometry.rect[]"
        },
        "playdate.graphics.sprite.new([image_or_tilemap])": {
            "signature": "playdate.graphics.sprite.new([image_or_tilemap])",
            "parameters": [
                {
                    "name": "image_or_tilemap",
                    "type": "playdate.graphics.image | playdate.graphics.tilemap"
                }
            ],
            "returnType": "playdate.graphics.sprite"
        },
        "playdate.graphics.sprite.spriteWithText(text, maxWidth, maxHeight, [backgroundColor, [leadingAdjustment, [truncationString, [alignment, [font]]]]])": {
            "signature": "playdate.graphics.sprite.spriteWithText(text, maxWidth, maxHeight, [backgroundColor, [leadingAdjustment, [truncationString, [alignment, [font]]]]])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                },
                {
                    "name": "maxWidth",
                    "type": "number"
                },
                {
                    "name": "maxHeight",
                    "type": "number"
                },
                {
                    "name": "backgroundColor",
                    "type": "PlaydateColor"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                },
                {
                    "name": "truncationString",
                    "type": "string"
                },
                {
                    "name": "alignment",
                    "type": "PlaydateTextAlignment"
                },
                {
                    "name": "font",
                    "type": "playdate.graphics.font"
                }
            ],
            "returnType": "playdate.graphics.sprite"
        },
        "playdate.graphics.sprite.update()": {
            "signature": "playdate.graphics.sprite.update()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.sprite.addSprite(sprite)": {
            "signature": "playdate.graphics.sprite.addSprite(sprite)",
            "parameters": [
                {
                    "name": "sprite",
                    "type": "playdate.graphics.sprite"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite.removeSprite(sprite)": {
            "signature": "playdate.graphics.sprite.removeSprite(sprite)",
            "parameters": [
                {
                    "name": "sprite",
                    "type": "playdate.graphics.sprite"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite.setBackgroundDrawingCallback(drawCallback)": {
            "signature": "playdate.graphics.sprite.setBackgroundDrawingCallback(drawCallback)",
            "parameters": [
                {
                    "name": "drawCallback",
                    "type": "(x: number, y: number, width: number, height: number) => void"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite.redrawBackground()": {
            "signature": "playdate.graphics.sprite.redrawBackground()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.sprite.setClipRectsInRange(x, y, width, height, startz, endz)": {
            "signature": "playdate.graphics.sprite.setClipRectsInRange(x, y, width, height, startz, endz)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                },
                {
                    "name": "startz",
                    "type": "number"
                },
                {
                    "name": "endz",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite.setClipRectsInRange(rect, startz, endz)": {
            "signature": "playdate.graphics.sprite.setClipRectsInRange(rect, startz, endz)",
            "parameters": [
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                },
                {
                    "name": "startz",
                    "type": "number"
                },
                {
                    "name": "endz",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite.clearClipRectsInRange(startz, endz)": {
            "signature": "playdate.graphics.sprite.clearClipRectsInRange(startz, endz)",
            "parameters": [
                {
                    "name": "startz",
                    "type": "number"
                },
                {
                    "name": "endz",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite.setAlwaysRedraw(flag)": {
            "signature": "playdate.graphics.sprite.setAlwaysRedraw(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite.getAlwaysRedraw()": {
            "signature": "playdate.graphics.sprite.getAlwaysRedraw()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.graphics.sprite.addDirtyRect(x, y, width, height)": {
            "signature": "playdate.graphics.sprite.addDirtyRect(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite.getAllSprites()": {
            "signature": "playdate.graphics.sprite.getAllSprites()",
            "parameters": [],
            "returnType": "playdate.graphics.sprite[]"
        },
        "playdate.graphics.sprite.performOnAllSprites(f)": {
            "signature": "playdate.graphics.sprite.performOnAllSprites(f)",
            "parameters": [
                {
                    "name": "f",
                    "type": "(sprite: playdate.graphics.sprite) => void"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite.spriteCount()": {
            "signature": "playdate.graphics.sprite.spriteCount()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.sprite.removeAll()": {
            "signature": "playdate.graphics.sprite.removeAll()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.sprite.removeSprites(spriteArray)": {
            "signature": "playdate.graphics.sprite.removeSprites(spriteArray)",
            "parameters": [
                {
                    "name": "spriteArray",
                    "type": "playdate.graphics.sprite[]"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite.allOverlappingSprites()": {
            "signature": "playdate.graphics.sprite.allOverlappingSprites()",
            "parameters": [],
            "returnType": "[playdate.graphics.sprite, playdate.graphics.sprite][]"
        },
        "playdate.graphics.sprite.querySpritesAtPoint(x, y)": {
            "signature": "playdate.graphics.sprite.querySpritesAtPoint(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.sprite[]"
        },
        "playdate.graphics.sprite.querySpritesAtPoint(p)": {
            "signature": "playdate.graphics.sprite.querySpritesAtPoint(p)",
            "parameters": [
                {
                    "name": "p",
                    "type": "playdate.geometry.point"
                }
            ],
            "returnType": "playdate.graphics.sprite[]"
        },
        "playdate.graphics.sprite.querySpritesInRect(x, y, width, height)": {
            "signature": "playdate.graphics.sprite.querySpritesInRect(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.sprite[]"
        },
        "playdate.graphics.sprite.querySpritesInRect(rect)": {
            "signature": "playdate.graphics.sprite.querySpritesInRect(rect)",
            "parameters": [
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "playdate.graphics.sprite[]"
        },
        "playdate.graphics.sprite.querySpritesAlongLine(x1, y1, x2, y2)": {
            "signature": "playdate.graphics.sprite.querySpritesAlongLine(x1, y1, x2, y2)",
            "parameters": [
                {
                    "name": "x1",
                    "type": "number"
                },
                {
                    "name": "y1",
                    "type": "number"
                },
                {
                    "name": "x2",
                    "type": "number"
                },
                {
                    "name": "y2",
                    "type": "number"
                }
            ],
            "returnType": "playdate.graphics.sprite[]"
        },
        "playdate.graphics.sprite.querySpritesAlongLine(lineSegment)": {
            "signature": "playdate.graphics.sprite.querySpritesAlongLine(lineSegment)",
            "parameters": [
                {
                    "name": "lineSegment",
                    "type": "playdate.geometry.lineSegmentnt"
                }
            ],
            "returnType": "playdate.graphics.sprite[]"
        },
        "playdate.graphics.sprite.querySpriteInfoAlongLine(x1, y1, x2, y2)": {
            "signature": "playdate.graphics.sprite.querySpriteInfoAlongLine(x1, y1, x2, y2)",
            "parameters": [
                {
                    "name": "x1",
                    "type": "number"
                },
                {
                    "name": "y1",
                    "type": "number"
                },
                {
                    "name": "x2",
                    "type": "number"
                },
                {
                    "name": "y2",
                    "type": "number"
                }
            ],
            "returnType": "PlaydateCollisionInfo"
        },
        "playdate.graphics.sprite.querySpriteInfoAlongLine(lineSegment)": {
            "signature": "playdate.graphics.sprite.querySpriteInfoAlongLine(lineSegment)",
            "parameters": [
                {
                    "name": "lineSegment",
                    "type": "playdate.geometry.lineSegmentnt"
                }
            ],
            "returnType": "PlaydateCollisionInfo"
        },
        "playdate.graphics.sprite.addEmptyCollisionSprite(r)": {
            "signature": "playdate.graphics.sprite.addEmptyCollisionSprite(r)",
            "parameters": [
                {
                    "name": "r",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite.addEmptyCollisionSprite(x, y, w, h)": {
            "signature": "playdate.graphics.sprite.addEmptyCollisionSprite(x, y, w, h)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "w",
                    "type": "number"
                },
                {
                    "name": "h",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite.addWallSprites(tilemap, emptyIDs, [xOffset, yOffset])": {
            "signature": "playdate.graphics.sprite.addWallSprites(tilemap, emptyIDs, [xOffset, yOffset])",
            "parameters": [
                {
                    "name": "tilemap",
                    "type": "playdate.graphics.tilemap"
                },
                {
                    "name": "emptyIDs",
                    "type": "number[]"
                },
                {
                    "name": "xOffset",
                    "type": "number"
                },
                {
                    "name": "yOffset",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setImage(image, [flip, [scale, [yscale]]])": {
            "signature": "playdate.graphics.sprite:setImage(image, [flip, [scale, [yscale]]])",
            "parameters": [
                {
                    "name": "image",
                    "type": "playdate.graphics.image"
                },
                {
                    "name": "flip",
                    "type": "PlaydateFlip"
                },
                {
                    "name": "scale",
                    "type": "number"
                },
                {
                    "name": "yscale",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:getImage()": {
            "signature": "playdate.graphics.sprite:getImage()",
            "parameters": [],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.sprite:add()": {
            "signature": "playdate.graphics.sprite:add()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.sprite:remove()": {
            "signature": "playdate.graphics.sprite:remove()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.sprite:moveTo(x, y)": {
            "signature": "playdate.graphics.sprite:moveTo(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:getPosition()": {
            "signature": "playdate.graphics.sprite:getPosition()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.sprite:moveBy(x, y)": {
            "signature": "playdate.graphics.sprite:moveBy(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setZIndex(z)": {
            "signature": "playdate.graphics.sprite:setZIndex(z)",
            "parameters": [
                {
                    "name": "z",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:getZIndex()": {
            "signature": "playdate.graphics.sprite:getZIndex()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.sprite:setVisible(flag)": {
            "signature": "playdate.graphics.sprite:setVisible(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:isVisible()": {
            "signature": "playdate.graphics.sprite:isVisible()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.graphics.sprite:setCenter(x, y)": {
            "signature": "playdate.graphics.sprite:setCenter(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:getCenter()": {
            "signature": "playdate.graphics.sprite:getCenter()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.sprite:getCenterPoint()": {
            "signature": "playdate.graphics.sprite:getCenterPoint()",
            "parameters": [],
            "returnType": "playdate.geometry.point"
        },
        "playdate.graphics.sprite:setSize(width, height)": {
            "signature": "playdate.graphics.sprite:setSize(width, height)",
            "parameters": [
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:getSize()": {
            "signature": "playdate.graphics.sprite:getSize()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.sprite:setScale(scale, [yScale])": {
            "signature": "playdate.graphics.sprite:setScale(scale, [yScale])",
            "parameters": [
                {
                    "name": "scale",
                    "type": "number"
                },
                {
                    "name": "yscale",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:getScale()": {
            "signature": "playdate.graphics.sprite:getScale()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.sprite:setRotation(angle, [scale, [yScale]])": {
            "signature": "playdate.graphics.sprite:setRotation(angle, [scale, [yScale]])",
            "parameters": [
                {
                    "name": "angle",
                    "type": "number"
                },
                {
                    "name": "scale",
                    "type": "number"
                },
                {
                    "name": "yscale",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:getRotation()": {
            "signature": "playdate.graphics.sprite:getRotation()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.sprite:copy()": {
            "signature": "playdate.graphics.sprite:copy()",
            "parameters": [],
            "returnType": "playdate.graphics.sprite"
        },
        "playdate.graphics.sprite:setUpdatesEnabled(flag)": {
            "signature": "playdate.graphics.sprite:setUpdatesEnabled(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:updatesEnabled()": {
            "signature": "playdate.graphics.sprite:updatesEnabled()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.graphics.sprite:setTag(tag)": {
            "signature": "playdate.graphics.sprite:setTag(tag)",
            "parameters": [
                {
                    "name": "tag",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:getTag()": {
            "signature": "playdate.graphics.sprite:getTag()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.sprite:setImageDrawMode(mode)": {
            "signature": "playdate.graphics.sprite:setImageDrawMode(mode)",
            "parameters": [
                {
                    "name": "mode",
                    "type": "PlaydateDrawMode"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setImageFlip(flip, [flipCollideRect])": {
            "signature": "playdate.graphics.sprite:setImageFlip(flip, [flipCollideRect])",
            "parameters": [
                {
                    "name": "flip",
                    "type": "PlaydateFlip"
                },
                {
                    "name": "flipCollideRect",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:getImageFlip()": {
            "signature": "playdate.graphics.sprite:getImageFlip()",
            "parameters": [],
            "returnType": "PlaydateFlip"
        },
        "playdate.graphics.sprite:setIgnoresDrawOffset(flag)": {
            "signature": "playdate.graphics.sprite:setIgnoresDrawOffset(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setBounds(upper-left-x, upper-left-y, width, height)": {
            "signature": "playdate.graphics.sprite:setBounds(upper-left-x, upper-left-y, width, height)",
            "parameters": [
                {
                    "name": "upper-left-x",
                    "type": "number"
                },
                {
                    "name": "upper-left-y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setBounds(rect)": {
            "signature": "playdate.graphics.sprite:setBounds(rect)",
            "parameters": [
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:getBounds()": {
            "signature": "playdate.graphics.sprite:getBounds()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number, number, number]>"
        },
        "playdate.graphics.sprite:getBoundsRect()": {
            "signature": "playdate.graphics.sprite:getBoundsRect()",
            "parameters": [],
            "returnType": "playdate.geometry.rect"
        },
        "playdate.graphics.sprite:setOpaque(flag)": {
            "signature": "playdate.graphics.sprite:setOpaque(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:isOpaque()": {
            "signature": "playdate.graphics.sprite:isOpaque()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.graphics.sprite:setTilemap(tilemap)": {
            "signature": "playdate.graphics.sprite:setTilemap(tilemap)",
            "parameters": [
                {
                    "name": "tilemap",
                    "type": "playdate.graphics.tilemap"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setAnimator(animator, [moveWithCollisions, [removeOnCollision]])": {
            "signature": "playdate.graphics.sprite:setAnimator(animator, [moveWithCollisions, [removeOnCollision]])",
            "parameters": [
                {
                    "name": "animator",
                    "type": "playdate.graphics.animator"
                },
                {
                    "name": "moveWithCollisions",
                    "type": "boolean"
                },
                {
                    "name": "removeOnCollision",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:removeAnimator()": {
            "signature": "playdate.graphics.sprite:removeAnimator()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setClipRect(x, y, width, height)": {
            "signature": "playdate.graphics.sprite:setClipRect(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setClipRect(rect)": {
            "signature": "playdate.graphics.sprite:setClipRect(rect)",
            "parameters": [
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:clearClipRect()": {
            "signature": "playdate.graphics.sprite:clearClipRect()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setStencilImage(stencil, [tile])": {
            "signature": "playdate.graphics.sprite:setStencilImage(stencil, [tile])",
            "parameters": [
                {
                    "name": "stencil",
                    "type": "playdate.graphics.image"
                },
                {
                    "name": "tile",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setStencilPattern(level, [ditherType])": {
            "signature": "playdate.graphics.sprite:setStencilPattern(level, [ditherType])",
            "parameters": [
                {
                    "name": "level",
                    "type": "number"
                },
                {
                    "name": "ditherType",
                    "type": "PlaydateDitherType",
                    "overrideOptions": {
                        "initializer": "PlaydateDitherType.Bayer8x8"
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:clearStencil()": {
            "signature": "playdate.graphics.sprite:clearStencil()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.sprite:markDirty()": {
            "signature": "playdate.graphics.sprite:markDirty()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setRedrawsOnImageChange(flag)": {
            "signature": "playdate.graphics.sprite:setRedrawsOnImageChange(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:draw(x, y, width, height)": {
            "signature": "playdate.graphics.sprite:draw(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:update()": {
            "signature": "playdate.graphics.sprite:update()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setCollideRect(x, y, width, height)": {
            "signature": "playdate.graphics.sprite:setCollideRect(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setCollideRect(rect)": {
            "signature": "playdate.graphics.sprite:setCollideRect(rect)",
            "parameters": [
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:getCollideRect()": {
            "signature": "playdate.graphics.sprite:getCollideRect()",
            "parameters": [],
            "returnType": "playdate.geometry.rect"
        },
        "playdate.graphics.sprite:getCollideBounds()": {
            "signature": "playdate.graphics.sprite:getCollideBounds()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number, number, number]>"
        },
        "playdate.graphics.sprite:clearCollideRect()": {
            "signature": "playdate.graphics.sprite:clearCollideRect()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.sprite:overlappingSprites()": {
            "signature": "playdate.graphics.sprite:overlappingSprites()",
            "parameters": [],
            "returnType": "playdate.graphics.sprite[]"
        },
        "playdate.graphics.sprite:alphaCollision(anotherSprite)": {
            "signature": "playdate.graphics.sprite:alphaCollision(anotherSprite)",
            "parameters": [
                {
                    "name": "anotherSprite",
                    "type": "playdate.graphics.sprite"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.graphics.sprite:setCollisionsEnabled(flag)": {
            "signature": "playdate.graphics.sprite:setCollisionsEnabled(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:collisionsEnabled()": {
            "signature": "playdate.graphics.sprite:collisionsEnabled()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.graphics.sprite:setGroups(groups)": {
            "signature": "playdate.graphics.sprite:setGroups(groups)",
            "parameters": [
                {
                    "name": "groups",
                    "type": "number[]"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setCollidesWithGroups(groups)": {
            "signature": "playdate.graphics.sprite:setCollidesWithGroups(groups)",
            "parameters": [
                {
                    "name": "groups",
                    "type": "number | number[]"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:setGroupMask(mask)": {
            "signature": "playdate.graphics.sprite:setGroupMask(mask)",
            "parameters": [
                {
                    "name": "mask",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:getGroupMask()": {
            "signature": "playdate.graphics.sprite:getGroupMask()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.sprite:setCollidesWithGroupsMask(mask)": {
            "signature": "playdate.graphics.sprite:setCollidesWithGroupsMask(mask)",
            "parameters": [
                {
                    "name": "mask",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.sprite:getCollidesWithGroupsMask()": {
            "signature": "playdate.graphics.sprite:getCollidesWithGroupsMask()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.sprite:resetGroupMask()": {
            "signature": "playdate.graphics.sprite:resetGroupMask()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.sprite:resetCollidesWithGroupsMask()": {
            "signature": "playdate.graphics.sprite:resetCollidesWithGroupsMask()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.sprite:moveWithCollisions(goalX, goalY)": {
            "signature": "playdate.graphics.sprite:moveWithCollisions(goalX, goalY)",
            "parameters": [
                {
                    "name": "goalX",
                    "type": "number"
                },
                {
                    "name": "goalY",
                    "type": "number"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number, PlaydateCollision[], number]>"
        },
        "playdate.graphics.sprite:moveWithCollisions(goalPoint)": {
            "signature": "playdate.graphics.sprite:moveWithCollisions(goalPoint)",
            "parameters": [
                {
                    "name": "goalPoint",
                    "type": "playdate.geometry.point"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number, PlaydateCollision[], number]>"
        },
        "playdate.graphics.sprite:checkCollisions(x, y)": {
            "signature": "playdate.graphics.sprite:checkCollisions(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number, PlaydateCollision[], number]>"
        },
        "playdate.graphics.sprite:checkCollisions(point)": {
            "signature": "playdate.graphics.sprite:checkCollisions(point)",
            "parameters": [
                {
                    "name": "point",
                    "type": "playdate.geometry.point"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number, PlaydateCollision[], number]>"
        },
        "playdate.graphics.sprite:collisionResponse(other)": {
            "signature": "playdate.graphics.sprite:collisionResponse(other)",
            "parameters": [
                {
                    "name": "other",
                    "type": "playdate.graphics.sprite"
                }
            ],
            "returnType": "PlaydateCollisionResponse"
        },
        "playdate.graphics.font.new(path)": {
            "signature": "playdate.graphics.font.new(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "playdate.graphics.font"
        },
        "playdate.graphics.font.newFamily(fontPaths)": {
            "signature": "playdate.graphics.font.newFamily(fontPaths)",
            "parameters": [
                {
                    "name": "fontPaths",
                    "type": "PlaydateFontFamilyPaths"
                }
            ],
            "returnType": "PlaydateFontFamily"
        },
        "playdate.graphics.font:drawText(text, x, y, [width, height], [leadingAdjustment], [wrapMode], [alignment])": {
            "signature": "playdate.graphics.font:drawText(text, x, y, [width, height], [leadingAdjustment], [wrapMode], [alignment])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                },
                {
                    "name": "wrapMode",
                    "type": "PlaydateWrapMode"
                },
                {
                    "name": "alignment",
                    "type": "PlaydateTextAlignment"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.font:drawText(text, rect, [leadingAdjustment], [wrapMode], [alignment])": {
            "signature": "playdate.graphics.font:drawText(text, rect, [leadingAdjustment], [wrapMode], [alignment])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                },
                {
                    "name": "rect",
                    "type": "playdate.geometry.rect"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                },
                {
                    "name": "wrapMode",
                    "type": "PlaydateWrapMode"
                },
                {
                    "name": "alignment",
                    "type": "PlaydateTextAlignment"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.font:drawTextAligned(text, x, y, alignment, [leadingAdjustment])": {
            "signature": "playdate.graphics.font:drawTextAligned(text, x, y, alignment, [leadingAdjustment])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "alignment",
                    "type": "PlaydateTextAlignment"
                },
                {
                    "name": "leadingAdjustment",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.font:getHeight()": {
            "signature": "playdate.graphics.font:getHeight()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.font:getTextWidth(text)": {
            "signature": "playdate.graphics.font:getTextWidth(text)",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                }
            ],
            "returnType": "number"
        },
        "playdate.graphics.font:setTracking(pixels)": {
            "signature": "playdate.graphics.font:setTracking(pixels)",
            "parameters": [
                {
                    "name": "pixels",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.font:getTracking()": {
            "signature": "playdate.graphics.font:getTracking()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.font:setLeading(pixels)": {
            "signature": "playdate.graphics.font:setLeading(pixels)",
            "parameters": [
                {
                    "name": "pixels",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.font:getLeading()": {
            "signature": "playdate.graphics.font:getLeading()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.font:getGlyph(character)": {
            "signature": "playdate.graphics.font:getGlyph(character)",
            "parameters": [
                {
                    "name": "character",
                    "type": "string"
                }
            ],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.video.new(path)": {
            "signature": "playdate.graphics.video.new(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "playdate.graphics.video"
        },
        "playdate.graphics.video:getSize()": {
            "signature": "playdate.graphics.video:getSize()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.graphics.video:getFrameCount()": {
            "signature": "playdate.graphics.video:getFrameCount()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.video:getFrameRate()": {
            "signature": "playdate.graphics.video:getFrameRate()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.graphics.video:setContext(image)": {
            "signature": "playdate.graphics.video:setContext(image)",
            "parameters": [
                {
                    "name": "image",
                    "type": "playdate.graphics.image"
                }
            ],
            "returnType": "void"
        },
        "playdate.graphics.video:getContext()": {
            "signature": "playdate.graphics.video:getContext()",
            "parameters": [],
            "returnType": "playdate.graphics.image"
        },
        "playdate.graphics.video:useScreenContext()": {
            "signature": "playdate.graphics.video:useScreenContext()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.graphics.video:renderFrame(number)": {
            "signature": "playdate.graphics.video:renderFrame(number)",
            "parameters": [
                {
                    "name": "number",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.keyboard.show([text])": {
            "signature": "playdate.keyboard.show([text])",
            "parameters": [
                {
                    "name": "text",
                    "type": "string"
                }
            ],
            "returnType": "void"
        },
        "playdate.keyboard.hide()": {
            "signature": "playdate.keyboard.hide()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.keyboard.setCapitalizationBehavior(behavior)": {
            "signature": "playdate.keyboard.setCapitalizationBehavior(behavior)",
            "parameters": [
                {
                    "name": "behavior",
                    "type": "PlaydateCapitalizationBehavior"
                }
            ],
            "returnType": "void"
        },
        "playdate.keyboard.left()": {
            "signature": "playdate.keyboard.left()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.keyboard.width()": {
            "signature": "playdate.keyboard.width()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.keyboard.isVisible()": {
            "signature": "playdate.keyboard.isVisible()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.keyboard.keyboardDidShowCallback": {
            "signature": "playdate.keyboard.keyboardDidShowCallback",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.keyboard.keyboardDidHideCallback": {
            "signature": "playdate.keyboard.keyboardDidHideCallback",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.keyboard.keyboardWillHideCallback": {
            "signature": "playdate.keyboard.keyboardWillHideCallback",
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "answer",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.keyboard.keyboardAnimatingCallback": {
            "signature": "playdate.keyboard.keyboardAnimatingCallback",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.keyboard.textChangedCallback": {
            "signature": "playdate.keyboard.textChangedCallback",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.math.lerp(min, max, t)": {
            "signature": "playdate.math.lerp(min, max, t)",
            "parameters": [
                {
                    "name": "min",
                    "type": "number"
                },
                {
                    "name": "max",
                    "type": "number"
                },
                {
                    "name": "t",
                    "type": "number"
                }
            ],
            "returnType": "number"
        },
        "playdate.pathfinder.graph.new([nodeCount, [coordinates]])": {
            "signature": "playdate.pathfinder.graph.new([nodeCount, [coordinates]])",
            "parameters": [
                {
                    "name": "nodeCount",
                    "type": "number"
                },
                {
                    "name": "coordinates",
                    "type": "[number, number][]"
                }
            ],
            "returnType": "playdate.pathfinder.graph"
        },
        "playdate.pathfinder.graph.new2DGrid(width, height, [allowDiagonals, [includedNodes]])": {
            "signature": "playdate.pathfinder.graph.new2DGrid(width, height, [allowDiagonals, [includedNodes]])",
            "parameters": [
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                },
                {
                    "name": "allowDiagonals",
                    "type": "boolean"
                },
                {
                    "name": "includedNodes",
                    "type": "(1 | 0)[]"
                }
            ],
            "returnType": "playdate.pathfinder.graph"
        },
        "playdate.pathfinder.graph:addNewNode(id, [x, y, [connectedNodes, weights, addReciprocalConnections]])": {
            "signature": "playdate.pathfinder.graph:addNewNode(id, [x, y, [connectedNodes, weights, addReciprocalConnections]])",
            "parameters": [
                {
                    "name": "id",
                    "type": "number"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "connectedNodes",
                    "type": "playdate.pathfinder.node[]"
                },
                {
                    "name": "weights",
                    "type": "number[]"
                },
                {
                    "name": "addReciprocalConnections",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.graph:addNewNodes(count)": {
            "signature": "playdate.pathfinder.graph:addNewNodes(count)",
            "parameters": [
                {
                    "name": "count",
                    "type": "number"
                }
            ],
            "returnType": "playdate.pathfinder.node[]"
        },
        "playdate.pathfinder.graph:addNode(node, [connectedNodes, weights, addReciprocalConnections])": {
            "signature": "playdate.pathfinder.graph:addNode(node, [connectedNodes, weights, addReciprocalConnections])",
            "parameters": [
                {
                    "name": "node",
                    "type": "playdate.pathfinder.node"
                },
                {
                    "name": "connectedNodes",
                    "type": "playdate.pathfinder.node[]"
                },
                {
                    "name": "weights",
                    "type": "number[]"
                },
                {
                    "name": "addReciprocalConnections",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.graph:addNodes(nodes)": {
            "signature": "playdate.pathfinder.graph:addNodes(nodes)",
            "parameters": [
                {
                    "name": "nodes",
                    "type": "playdate.pathfinder.node[]"
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.graph:allNodes()": {
            "signature": "playdate.pathfinder.graph:allNodes()",
            "parameters": [],
            "returnType": "playdate.pathfinder.node[]"
        },
        "playdate.pathfinder.graph:removeNode(node)": {
            "signature": "playdate.pathfinder.graph:removeNode(node)",
            "parameters": [
                {
                    "name": "node",
                    "type": "playdate.pathfinder.node"
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.graph:removeNodeWithXY(x, y)": {
            "signature": "playdate.pathfinder.graph:removeNodeWithXY(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.graph:removeNodeWithID(id)": {
            "signature": "playdate.pathfinder.graph:removeNodeWithID(id)",
            "parameters": [
                {
                    "name": "id",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.graph:nodeWithID(id)": {
            "signature": "playdate.pathfinder.graph:nodeWithID(id)",
            "parameters": [
                {
                    "name": "id",
                    "type": "number"
                }
            ],
            "returnType": "playdate.pathfinder.node"
        },
        "playdate.pathfinder.graph:nodeWithXY(x, y)": {
            "signature": "playdate.pathfinder.graph:nodeWithXY(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "playdate.pathfinder.node"
        },
        "playdate.pathfinder.graph:addConnections(connections)": {
            "signature": "playdate.pathfinder.graph:addConnections(connections)",
            "parameters": [
                {
                    "name": "connections",
                    "type": "Record<number, number[]>"
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.graph:addConnectionToNodeWithID(fromNodeID, toNodeID, weight, addReciprocalConnection)": {
            "signature": "playdate.pathfinder.graph:addConnectionToNodeWithID(fromNodeID, toNodeID, weight, addReciprocalConnection)",
            "parameters": [
                {
                    "name": "fromNodeID",
                    "type": "number"
                },
                {
                    "name": "toNodeID",
                    "type": "number"
                },
                {
                    "name": "weight",
                    "type": "number"
                },
                {
                    "name": "addReciprocalConnection",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.graph:removeAllConnections()": {
            "signature": "playdate.pathfinder.graph:removeAllConnections()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.pathfinder.graph:removeAllConnectionsFromNodeWithID(id, [removeIncoming])": {
            "signature": "playdate.pathfinder.graph:removeAllConnectionsFromNodeWithID(id, [removeIncoming])",
            "parameters": [
                {
                    "name": "id",
                    "type": "number"
                },
                {
                    "name": "removeIncoming",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.graph:findPath(startNode, goalNode, [heuristicFunction, [findPathToGoalAdjacentNodes]])": {
            "signature": "playdate.pathfinder.graph:findPath(startNode, goalNode, [heuristicFunction, [findPathToGoalAdjacentNodes]])",
            "parameters": [
                {
                    "name": "startNode",
                    "type": "playdate.pathfinder.node"
                },
                {
                    "name": "goalNode",
                    "type": "playdate.pathfinder.node"
                },
                {
                    "name": "heuristicFunction",
                    "type": "(startNode: playdate.pathfinder.node, goalNode: playdate.pathfinder.node) => number"
                },
                {
                    "name": "findPathToGoalAdjacentNodes",
                    "type": "boolean"
                }
            ],
            "returnType": "playdate.pathfinder.node[] | null"
        },
        "playdate.pathfinder.graph:findPathWithIDs(startNodeID, goalNodeID, [heuristicFunction, [findPathToGoalAdjacentNodes]])": {
            "signature": "playdate.pathfinder.graph:findPathWithIDs(startNodeID, goalNodeID, [heuristicFunction, [findPathToGoalAdjacentNodes]])",
            "parameters": [
                {
                    "name": "startNodeID",
                    "type": "number"
                },
                {
                    "name": "goalNodeID",
                    "type": "number"
                },
                {
                    "name": "heuristicFunction",
                    "type": "(startNode: playdate.pathfinder.node, goalNode: playdate.pathfinder.node) => number"
                },
                {
                    "name": "findPathToGoalAdjacentNodes",
                    "type": "boolean"
                }
            ],
            "returnType": "playdate.pathfinder.node[] | null"
        },
        "playdate.pathfinder.graph:setXYForNodeWithID(id, x, y)": {
            "signature": "playdate.pathfinder.graph:setXYForNodeWithID(id, x, y)",
            "parameters": [
                {
                    "name": "id",
                    "type": "number"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.node:addConnection(node, weight, addReciprocalConnection)": {
            "signature": "playdate.pathfinder.node:addConnection(node, weight, addReciprocalConnection)",
            "parameters": [
                {
                    "name": "node",
                    "type": "playdate.pathfinder.node"
                },
                {
                    "name": "weight",
                    "type": "number"
                },
                {
                    "name": "addReciprocalConnection",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.node:addConnections(nodes, weights, addReciprocalConnections)": {
            "signature": "playdate.pathfinder.node:addConnections(nodes, weights, addReciprocalConnections)",
            "parameters": [
                {
                    "name": "nodes",
                    "type": "playdate.pathfinder.node[]"
                },
                {
                    "name": "weights",
                    "type": "number[]"
                },
                {
                    "name": "addReciprocalConnections",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.node:addConnectionToNodeWithXY(x, y, weight, addReciprocalConnection)": {
            "signature": "playdate.pathfinder.node:addConnectionToNodeWithXY(x, y, weight, addReciprocalConnection)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "weight",
                    "type": "number"
                },
                {
                    "name": "addReciprocalConnection",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.node:connectedNodes()": {
            "signature": "playdate.pathfinder.node:connectedNodes()",
            "parameters": [],
            "returnType": "playdate.pathfinder.node[]"
        },
        "playdate.pathfinder.node:removeConnection(node, [removeReciprocal])": {
            "signature": "playdate.pathfinder.node:removeConnection(node, [removeReciprocal])",
            "parameters": [
                {
                    "name": "node",
                    "type": "playdate.pathfinder.node"
                },
                {
                    "name": "removeReciprocal",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "false"
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.node:removeAllConnections([removeIncoming])": {
            "signature": "playdate.pathfinder.node:removeAllConnections([removeIncoming])",
            "parameters": [
                {
                    "name": "removeIncoming",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "false"
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.pathfinder.node:setXY(x, y)": {
            "signature": "playdate.pathfinder.node:setXY(x, y)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.simulator.writeToFile(image, path)": {
            "signature": "playdate.simulator.writeToFile(image, path)",
            "parameters": [
                {
                    "name": "image",
                    "type": "playdate.graphics.image"
                },
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "void"
        },
        "playdate.simulator.exit()": {
            "signature": "playdate.simulator.exit()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.simulator.getURL(url)": {
            "signature": "playdate.simulator.getURL(url)",
            "parameters": [
                {
                    "name": "url",
                    "type": "string"
                }
            ],
            "returnType": "string"
        },
        "playdate.sound.getSampleRate()": {
            "signature": "playdate.sound.getSampleRate()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.playingSources()": {
            "signature": "playdate.sound.playingSources()",
            "parameters": [],
            "returnType": "PlaydateAudioSource[]"
        },
        "playdate.sound.addEffect(effect)": {
            "signature": "playdate.sound.addEffect(effect)",
            "parameters": [
                {
                    "name": "effect",
                    "type": "PlaydateSoundEffect"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.removeEffect(effect)": {
            "signature": "playdate.sound.removeEffect(effect)",
            "parameters": [
                {
                    "name": "effect",
                    "type": "PlaydateSoundEffect"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.getHeadphoneState(changeCallback)": {
            "signature": "playdate.sound.getHeadphoneState(changeCallback)",
            "parameters": [
                {
                    "name": "changeCallback",
                    "type": "((headphone: boolean, mic: boolean) => void) | null"
                }
            ],
            "returnType": "LuaMultiReturn<[boolean, boolean]>"
        },
        "playdate.sound.setOutputsActive(headphones, speaker)": {
            "signature": "playdate.sound.setOutputsActive(headphones, speaker)",
            "parameters": [
                {
                    "name": "headphones",
                    "type": "boolean"
                },
                {
                    "name": "speaker",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.getCurrentTime()": {
            "signature": "playdate.sound.getCurrentTime()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.resetTime()": {
            "signature": "playdate.sound.resetTime()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.sampleplayer.new(path)": {
            "signature": "playdate.sound.sampleplayer.new(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "playdate.sound.sampleplayer"
        },
        "playdate.sound.sampleplayer.new(sample)": {
            "signature": "playdate.sound.sampleplayer.new(sample)",
            "parameters": [
                {
                    "name": "sample",
                    "type": "playdate.sound.sample"
                }
            ],
            "returnType": "playdate.sound.sampleplayer"
        },
        "playdate.sound.sampleplayer:copy()": {
            "signature": "playdate.sound.sampleplayer:copy()",
            "parameters": [],
            "returnType": "playdate.sound.sampleplayer"
        },
        "playdate.sound.sampleplayer:play([repeatCount], [rate])": {
            "signature": "playdate.sound.sampleplayer:play([repeatCount], [rate])",
            "parameters": [
                {
                    "name": "repeatCount",
                    "type": "number"
                },
                {
                    "name": "rate",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sampleplayer:playAt(when, [vol], [rightvol], [rate])": {
            "signature": "playdate.sound.sampleplayer:playAt(when, [vol], [rightvol], [rate])",
            "parameters": [
                {
                    "name": "when",
                    "type": "number"
                },
                {
                    "name": "vol",
                    "type": "number"
                },
                {
                    "name": "rightvol",
                    "type": "number"
                },
                {
                    "name": "rate",
                    "type": "number"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.sound.sampleplayer:setVolume(left, [right])": {
            "signature": "playdate.sound.sampleplayer:setVolume(left, [right])",
            "parameters": [
                {
                    "name": "left",
                    "type": "number"
                },
                {
                    "name": "right",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sampleplayer:getVolume()": {
            "signature": "playdate.sound.sampleplayer:getVolume()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, undefined]> | LuaMultiReturn<[number, number]>"
        },
        "playdate.sound.sampleplayer:setLoopCallback(callback, [arg])": {
            "signature": "playdate.sound.sampleplayer:setLoopCallback(callback, [arg])",
            "overrideOptions": {
                "typeParameters": "TArgument"
            },
            "parameters": [
                {
                    "name": "callback",
                    "type": "(sample: playdate.sound.sample, arg: TArgument) => void"
                },
                {
                    "name": "arg",
                    "type": "TArgument"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sampleplayer:setPlayRange(start, end)": {
            "signature": "playdate.sound.sampleplayer:setPlayRange(start, end)",
            "parameters": [
                {
                    "name": "start",
                    "type": "number"
                },
                {
                    "name": "end",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sampleplayer:setPaused(flag)": {
            "signature": "playdate.sound.sampleplayer:setPaused(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sampleplayer:isPlaying()": {
            "signature": "playdate.sound.sampleplayer:isPlaying()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.sound.sampleplayer:stop()": {
            "signature": "playdate.sound.sampleplayer:stop()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.sampleplayer:setFinishCallback(func, [arg])": {
            "signature": "playdate.sound.sampleplayer:setFinishCallback(func, [arg])",
            "overrideOptions": {
                "typeParameters": "TArgument"
            },
            "parameters": [
                {
                    "name": "func",
                    "type": "(sample: playdate.sound.sample, arg: TArgument) => void"
                },
                {
                    "name": "arg",
                    "type": "TArgument"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sampleplayer:setSample(sample)": {
            "signature": "playdate.sound.sampleplayer:setSample(sample)",
            "parameters": [
                {
                    "name": "sample",
                    "type": "playdate.sound.sample"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sampleplayer:getSample()": {
            "signature": "playdate.sound.sampleplayer:getSample()",
            "parameters": [],
            "returnType": "playdate.sound.sample"
        },
        "playdate.sound.sampleplayer:getLength()": {
            "signature": "playdate.sound.sampleplayer:getLength()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.sampleplayer:setRate(rate)": {
            "signature": "playdate.sound.sampleplayer:setRate(rate)",
            "parameters": [
                {
                    "name": "rate",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sampleplayer:getRate()": {
            "signature": "playdate.sound.sampleplayer:getRate()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.sampleplayer:setRateMod(signal)": {
            "signature": "playdate.sound.sampleplayer:setRateMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sampleplayer:setOffset(seconds)": {
            "signature": "playdate.sound.sampleplayer:setOffset(seconds)",
            "parameters": [
                {
                    "name": "seconds",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sampleplayer:getOffset()": {
            "signature": "playdate.sound.sampleplayer:getOffset()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.fileplayer.new([buffersize])": {
            "signature": "playdate.sound.fileplayer.new([buffersize])",
            "parameters": [
                {
                    "name": "buffersize",
                    "type": "number"
                }
            ],
            "returnType": "playdate.sound.fileplayer"
        },
        "playdate.sound.fileplayer.new(path, [buffersize])": {
            "signature": "playdate.sound.fileplayer.new(path, [buffersize])",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                },
                {
                    "name": "buffersize",
                    "type": "number"
                }
            ],
            "returnType": "playdate.sound.fileplayer"
        },
        "playdate.sound.fileplayer:load(path)": {
            "signature": "playdate.sound.fileplayer:load(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.fileplayer:play([repeatCount])": {
            "signature": "playdate.sound.fileplayer:play([repeatCount])",
            "parameters": [
                {
                    "name": "repeatCount",
                    "type": "number"
                }
            ],
            "returnType": "LuaMultiReturn<[true, undefined]> | LuaMultiReturn<[false, string]>"
        },
        "playdate.sound.fileplayer:stop()": {
            "signature": "playdate.sound.fileplayer:stop()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.fileplayer:pause()": {
            "signature": "playdate.sound.fileplayer:pause()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.fileplayer:isPlaying()": {
            "signature": "playdate.sound.fileplayer:isPlaying()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.sound.fileplayer:getLength()": {
            "signature": "playdate.sound.fileplayer:getLength()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.fileplayer:setFinishCallback(func, [arg])": {
            "signature": "playdate.sound.fileplayer:setFinishCallback(func, [arg])",
            "overrideOptions": {
                "typeParameters": "TArgument"
            },
            "parameters": [
                {
                    "name": "func",
                    "type": "(fileplayer: playdate.sound.fileplayer, arg: TArgument) => void"
                },
                {
                    "name": "arg",
                    "type": "TArgument"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.fileplayer:didUnderrun()": {
            "signature": "playdate.sound.fileplayer:didUnderrun()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.sound.fileplayer:setStopOnUnderrun(flag)": {
            "signature": "playdate.sound.fileplayer:setStopOnUnderrun(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.fileplayer:setLoopRange(start, [end, [loopCallback, [arg]]])": {
            "signature": "playdate.sound.fileplayer:setLoopRange(start, [end, [loopCallback, [arg]]])",
            "overrideOptions": {
                "typeParameters": "TArgument"
            },
            "parameters": [
                {
                    "name": "start",
                    "type": "number"
                },
                {
                    "name": "end",
                    "type": "number"
                },
                {
                    "name": "loopCallback",
                    "type": "(fileplayer: playdate.sound.fileplayer, arg: TArgument) => void"
                },
                {
                    "name": "arg",
                    "type": "TArgument"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.fileplayer:setLoopCallback(callback, [arg])": {
            "signature": "playdate.sound.fileplayer:setLoopCallback(callback, [arg])",
            "overrideOptions": {
                "typeParameters": "TArgument"
            },
            "parameters": [
                {
                    "name": "callback",
                    "type": "(fileplayer: playdate.sound.fileplayer, arg: TArgument) => void"
                },
                {
                    "name": "arg",
                    "type": "TArgument"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.fileplayer:setBufferSize(seconds)": {
            "signature": "playdate.sound.fileplayer:setBufferSize(seconds)",
            "parameters": [
                {
                    "name": "seconds",
                    "type": "number"
                }
            ],
            "returnType": "LuaMultiReturn<[true, undefined]> | LuaMultiReturn<[false, string]>"
        },
        "playdate.sound.fileplayer:setRate(rate)": {
            "signature": "playdate.sound.fileplayer:setRate(rate)",
            "parameters": [
                {
                    "name": "rate",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.fileplayer:getRate()": {
            "signature": "playdate.sound.fileplayer:getRate()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.fileplayer:setRateMod(signal)": {
            "signature": "playdate.sound.fileplayer:setRateMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.fileplayer:setVolume(left, [right, [fadeSeconds, [fadeCallback, [arg]]]])": {
            "signature": "playdate.sound.fileplayer:setVolume(left, [right, [fadeSeconds, [fadeCallback, [arg]]]])",
            "overrideOptions": {
                "typeParameters": "TArgument"
            },
            "parameters": [
                {
                    "name": "left",
                    "type": "number"
                },
                {
                    "name": "right",
                    "type": "number"
                },
                {
                    "name": "fadeSeconds",
                    "type": "number"
                },
                {
                    "name": "fadeCallback",
                    "type": "(fileplayer: playdate.sound.fileplayer, arg: TArgument) => void"
                },
                {
                    "name": "arg",
                    "type": "TArgument"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.fileplayer:getVolume()": {
            "signature": "playdate.sound.fileplayer:getVolume()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, undefined]> | LuaMultiReturn<[number, number]>"
        },
        "playdate.sound.fileplayer:setOffset(seconds)": {
            "signature": "playdate.sound.fileplayer:setOffset(seconds)",
            "parameters": [
                {
                    "name": "seconds",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.fileplayer:getOffset()": {
            "signature": "playdate.sound.fileplayer:getOffset()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.sample.new(path)": {
            "signature": "playdate.sound.sample.new(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "playdate.sound.sample"
        },
        "playdate.sound.sample.new(seconds, [format])": {
            "signature": "playdate.sound.sample.new(seconds, [format])",
            "parameters": [
                {
                    "name": "seconds",
                    "type": "number"
                },
                {
                    "name": "format",
                    "type": "PlaydateSoundFormat",
                    "overrideOptions": {
                        "initializer": "PlaydateSoundFormat['16bitStereo']"
                    }
                }
            ],
            "returnType": "playdate.sound.sample"
        },
        "playdate.sound.sample:getSubsample(startOffset, endOffset)": {
            "signature": "playdate.sound.sample:getSubsample(startOffset, endOffset)",
            "parameters": [
                {
                    "name": "startOffset",
                    "type": "number"
                },
                {
                    "name": "endOffset",
                    "type": "number"
                }
            ],
            "returnType": "playdate.sound.sample"
        },
        "playdate.sound.sample:load(path)": {
            "signature": "playdate.sound.sample:load(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sample:decompress()": {
            "signature": "playdate.sound.sample:decompress()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[true, undefined]> | LuaMultiReturn<[false, string]>"
        },
        "playdate.sound.sample:getSampleRate()": {
            "signature": "playdate.sound.sample:getSampleRate()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.sample:getFormat()": {
            "signature": "playdate.sound.sample:getFormat()",
            "parameters": [],
            "returnType": "PlaydateSoundFormat"
        },
        "playdate.sound.sample:getLength()": {
            "signature": "playdate.sound.sample:getLength()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.sound.sample:play([repeatCount], [rate])": {
            "signature": "playdate.sound.sample:play([repeatCount], [rate])",
            "parameters": [
                {
                    "name": "repeatCount",
                    "type": "number"
                },
                {
                    "name": "rate",
                    "type": "number"
                }
            ],
            "returnType": "playdate.sound.sampleplayer"
        },
        "playdate.sound.sample:playAt(when, [vol], [rightvol], [rate])": {
            "signature": "playdate.sound.sample:playAt(when, [vol], [rightvol], [rate])",
            "parameters": [
                {
                    "name": "when",
                    "type": "number"
                },
                {
                    "name": "vol",
                    "type": "number"
                },
                {
                    "name": "rightvol",
                    "type": "number"
                },
                {
                    "name": "rate",
                    "type": "number"
                }
            ],
            "returnType": "playdate.sound.sampleplayer"
        },
        "playdate.sound.sample:save(filename)": {
            "signature": "playdate.sound.sample:save(filename)",
            "parameters": [
                {
                    "name": "filename",
                    "type": "string"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.channel.new()": {
            "signature": "playdate.sound.channel.new()",
            "parameters": [],
            "returnType": "playdate.sound.channel"
        },
        "playdate.sound.channel:remove()": {
            "signature": "playdate.sound.channel:remove()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.channel:addEffect(effect)": {
            "signature": "playdate.sound.channel:addEffect(effect)",
            "parameters": [
                {
                    "name": "effect",
                    "type": "PlaydateSoundEffect"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.channel:removeEffect(effect)": {
            "signature": "playdate.sound.channel:removeEffect(effect)",
            "parameters": [
                {
                    "name": "effect",
                    "type": "PlaydateSoundEffect"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.channel:addSource(source)": {
            "signature": "playdate.sound.channel:addSource(source)",
            "parameters": [
                {
                    "name": "source",
                    "type": "PlaydateAudioSource"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.channel:removeSource(source)": {
            "signature": "playdate.sound.channel:removeSource(source)",
            "parameters": [
                {
                    "name": "source",
                    "type": "PlaydateAudioSource"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.channel:setVolume(volume)": {
            "signature": "playdate.sound.channel:setVolume(volume)",
            "parameters": [
                {
                    "name": "volume",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.channel:getVolume()": {
            "signature": "playdate.sound.channel:getVolume()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.channel:setPan(pan)": {
            "signature": "playdate.sound.channel:setPan(pan)",
            "parameters": [
                {
                    "name": "pan",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.channel:setPanMod(signal)": {
            "signature": "playdate.sound.channel:setPanMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.channel:setVolumeMod(signal)": {
            "signature": "playdate.sound.channel:setVolumeMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.channel:getDryLevelSignal()": {
            "signature": "playdate.sound.channel:getDryLevelSignal()",
            "parameters": [],
            "returnType": "playdate.sound.signal"
        },
        "playdate.sound.channel:getWetLevelSignal()": {
            "signature": "playdate.sound.channel:getWetLevelSignal()",
            "parameters": [],
            "returnType": "playdate.sound.signal"
        },
        "playdate.sound.synth.new([waveform])": {
            "signature": "playdate.sound.synth.new([waveform])",
            "parameters": [
                {
                    "name": "waveform",
                    "type": "PlaydateSoundWave"
                }
            ],
            "returnType": "playdate.sound.synth"
        },
        "playdate.sound.synth.new(sample, [sustainStart, sustainEnd])": {
            "signature": "playdate.sound.synth.new(sample, [sustainStart, sustainEnd])",
            "parameters": [
                {
                    "name": "sample",
                    "type": "playdate.sound.sample"
                },
                {
                    "name": "sustainStart",
                    "type": "number"
                },
                {
                    "name": "sustainEnd",
                    "type": "number"
                }
            ],
            "returnType": "playdate.sound.synth"
        },
        "playdate.sound.synth:copy()": {
            "signature": "playdate.sound.synth:copy()",
            "parameters": [],
            "returnType": "playdate.sound.synth"
        },
        "playdate.sound.synth:playNote(pitch, [volume, [length, [when]]])": {
            "signature": "playdate.sound.synth:playNote(pitch, [volume, [length, [when]]])",
            "parameters": [
                {
                    "name": "pitch",
                    "type": "number"
                },
                {
                    "name": "volume",
                    "type": "number"
                },
                {
                    "name": "length",
                    "type": "number"
                },
                {
                    "name": "when",
                    "type": "number"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.sound.synth:playMIDINote(note, [volume, [length, [when]]])": {
            "signature": "playdate.sound.synth:playMIDINote(note, [volume, [length, [when]]])",
            "parameters": [
                {
                    "name": "note",
                    "type": "string"
                },
                {
                    "name": "volume",
                    "type": "number"
                },
                {
                    "name": "length",
                    "type": "number"
                },
                {
                    "name": "when",
                    "type": "number"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.sound.synth:noteOff()": {
            "signature": "playdate.sound.synth:noteOff()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.synth:stop()": {
            "signature": "playdate.sound.synth:stop()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.synth:isPlaying()": {
            "signature": "playdate.sound.synth:isPlaying()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.sound.synth:setAmplitudeMod(signal)": {
            "signature": "playdate.sound.synth:setAmplitudeMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.synth:setADSR(attack, decay, sustain, release)": {
            "signature": "playdate.sound.synth:setADSR(attack, decay, sustain, release)",
            "parameters": [
                {
                    "name": "attack",
                    "type": "number"
                },
                {
                    "name": "decay",
                    "type": "number"
                },
                {
                    "name": "sustain",
                    "type": "number"
                },
                {
                    "name": "release",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.synth:setAttack(time)": {
            "signature": "playdate.sound.synth:setAttack(time)",
            "parameters": [
                {
                    "name": "time",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.synth:setDecay(time)": {
            "signature": "playdate.sound.synth:setDecay(time)",
            "parameters": [
                {
                    "name": "time",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.synth:setSustain(level)": {
            "signature": "playdate.sound.synth:setSustain(level)",
            "parameters": [
                {
                    "name": "level",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.synth:setRelease(time)": {
            "signature": "playdate.sound.synth:setRelease(time)",
            "parameters": [
                {
                    "name": "time",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.synth:clearEnvelope()": {
            "signature": "playdate.sound.synth:clearEnvelope()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.synth:setEnvelopeCurvature(amount)": {
            "signature": "playdate.sound.synth:setEnvelopeCurvature(amount)",
            "parameters": [
                {
                    "name": "amount",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.synth:getEnvelope()": {
            "signature": "playdate.sound.synth:getEnvelope()",
            "parameters": [],
            "returnType": "playdate.sound.envelope"
        },
        "playdate.sound.synth:setFinishCallback(function)": {
            "signature": "playdate.sound.synth:setFinishCallback(function)",
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "func",
                    "type": "() => void"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.synth:setFrequencyMod(signal)": {
            "signature": "playdate.sound.synth:setFrequencyMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.synth:setLegato(flag)": {
            "signature": "playdate.sound.synth:setLegato(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.synth:setVolume(left, [right])": {
            "signature": "playdate.sound.synth:setVolume(left, [right])",
            "parameters": [
                {
                    "name": "left",
                    "type": "number"
                },
                {
                    "name": "right",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.synth:getVolume()": {
            "signature": "playdate.sound.synth:getVolume()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, undefined]> | LuaMultiReturn<[number, number]>"
        },
        "playdate.sound.synth:setWaveform(waveform)": {
            "signature": "playdate.sound.synth:setWaveform(waveform)",
            "parameters": [
                {
                    "name": "waveform",
                    "type": "PlaydateSoundWave | playdate.sound.sample"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.synth:setWavetable(sample, samplesize, xsize, [ysize])": {
            "signature": "playdate.sound.synth:setWavetable(sample, samplesize, xsize, [ysize])",
            "parameters": [
                {
                    "name": "sample",
                    "type": "playdate.sound.sample"
                },
                {
                    "name": "samplesize",
                    "type": "number"
                },
                {
                    "name": "xsize",
                    "type": "number"
                },
                {
                    "name": "ysize",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.synth:setParameter(parameter, value)": {
            "signature": "playdate.sound.synth:setParameter(parameter, value)",
            "parameters": [
                {
                    "name": "parameter",
                    "type": "number"
                },
                {
                    "name": "value",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.synth:setParameterMod(parameter, signal)": {
            "signature": "playdate.sound.synth:setParameterMod(parameter, signal)",
            "parameters": [
                {
                    "name": "parameter",
                    "type": "number"
                },
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.signal:setOffset(offset)": {
            "signature": "playdate.sound.signal:setOffset(offset)",
            "parameters": [
                {
                    "name": "offset",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.signal:setScale(scale)": {
            "signature": "playdate.sound.signal:setScale(scale)",
            "parameters": [
                {
                    "name": "scale",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.signal:getValue()": {
            "signature": "playdate.sound.signal:getValue()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.lfo.new([type])": {
            "signature": "playdate.sound.lfo.new([type])",
            "parameters": [
                {
                    "name": "type",
                    "type": "PlaydateSoundLfoType"
                }
            ],
            "returnType": "playdate.sound.lfo"
        },
        "playdate.sound.lfo:setType(type)": {
            "signature": "playdate.sound.lfo:setType(type)",
            "parameters": [
                {
                    "name": "type",
                    "type": "PlaydateSoundWave"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.lfo:setArpeggio(note1, ...)": {
            "signature": "playdate.sound.lfo:setArpeggio(note1, ...)",
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "notes",
                    "type": "number",
                    "overrideOptions": {
                        "isRestParameter": true
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.lfo:setCenter(center)": {
            "signature": "playdate.sound.lfo:setCenter(center)",
            "parameters": [
                {
                    "name": "center",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.lfo:setDepth(depth)": {
            "signature": "playdate.sound.lfo:setDepth(depth)",
            "parameters": [
                {
                    "name": "depth",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.lfo:setRate(rate)": {
            "signature": "playdate.sound.lfo:setRate(rate)",
            "parameters": [
                {
                    "name": "rate",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.lfo:setPhase(phase)": {
            "signature": "playdate.sound.lfo:setPhase(phase)",
            "parameters": [
                {
                    "name": "phase",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.lfo:setStartPhase(phase)": {
            "signature": "playdate.sound.lfo:setStartPhase(phase)",
            "parameters": [
                {
                    "name": "phase",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.lfo:setGlobal(flag)": {
            "signature": "playdate.sound.lfo:setGlobal(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.lfo:setRetrigger(flag)": {
            "signature": "playdate.sound.lfo:setRetrigger(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.lfo:setDelay(holdoff, ramp)": {
            "signature": "playdate.sound.lfo:setDelay(holdoff, ramp)",
            "parameters": [
                {
                    "name": "holdoff",
                    "type": "number"
                },
                {
                    "name": "ramp",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.lfo:getValue()": {
            "signature": "playdate.sound.lfo:getValue()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.envelope.new([attack, decay, sustain, release])": {
            "signature": "playdate.sound.envelope.new([attack, decay, sustain, release])",
            "parameters": [
                {
                    "name": "attack",
                    "type": "number"
                },
                {
                    "name": "decay",
                    "type": "number"
                },
                {
                    "name": "sustain",
                    "type": "number"
                },
                {
                    "name": "release",
                    "type": "number"
                }
            ],
            "returnType": "playdate.sound.envelope"
        },
        "playdate.sound.envelope:setAttack(attack)": {
            "signature": "playdate.sound.envelope:setAttack(attack)",
            "parameters": [
                {
                    "name": "attack",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.envelope:setDecay(decay)": {
            "signature": "playdate.sound.envelope:setDecay(decay)",
            "parameters": [
                {
                    "name": "decay",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.envelope:setSustain(sustain)": {
            "signature": "playdate.sound.envelope:setSustain(sustain)",
            "parameters": [
                {
                    "name": "sustain",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.envelope:setRelease(release)": {
            "signature": "playdate.sound.envelope:setRelease(release)",
            "parameters": [
                {
                    "name": "release",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.envelope:setCurvature(amount)": {
            "signature": "playdate.sound.envelope:setCurvature(amount)",
            "parameters": [
                {
                    "name": "amount",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.envelope:setVelocitySensitivity(amount)": {
            "signature": "playdate.sound.envelope:setVelocitySensitivity(amount)",
            "parameters": [
                {
                    "name": "amount",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.envelope:setRateScaling(scaling, [start, end])": {
            "signature": "playdate.sound.envelope:setRateScaling(scaling, [start, end])",
            "parameters": [
                {
                    "name": "scaling",
                    "type": "number"
                },
                {
                    "name": "start",
                    "type": "number | string",
                    "overrideOptions": {
                        "initializer": "'C1'"
                    }
                },
                {
                    "name": "end",
                    "type": "number | string",
                    "overrideOptions": {
                        "initializer": "'C5'"
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.envelope:setScale(scale)": {
            "signature": "playdate.sound.envelope:setScale(scale)",
            "parameters": [
                {
                    "name": "scale",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.envelope:setOffset(offset)": {
            "signature": "playdate.sound.envelope:setOffset(offset)",
            "parameters": [
                {
                    "name": "offset",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.envelope:setLegato(flag)": {
            "signature": "playdate.sound.envelope:setLegato(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.envelope:setRetrigger(flag)": {
            "signature": "playdate.sound.envelope:setRetrigger(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.envelope:trigger(velocity, [length])": {
            "signature": "playdate.sound.envelope:trigger(velocity, [length])",
            "parameters": [
                {
                    "name": "velocity",
                    "type": "number"
                },
                {
                    "name": "length",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.envelope:setGlobal(flag)": {
            "signature": "playdate.sound.envelope:setGlobal(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.envelope:getValue()": {
            "signature": "playdate.sound.envelope:getValue()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.bitcrusher.new()": {
            "signature": "playdate.sound.bitcrusher.new()",
            "parameters": [],
            "returnType": "playdate.sound.bitcrusher"
        },
        "playdate.sound.bitcrusher:setMix(level)": {
            "signature": "playdate.sound.bitcrusher:setMix(level)",
            "parameters": [
                {
                    "name": "level",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.bitcrusher:setMixMod(signal)": {
            "signature": "playdate.sound.bitcrusher:setMixMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.bitcrusher:setAmount(amt)": {
            "signature": "playdate.sound.bitcrusher:setAmount(amt)",
            "parameters": [
                {
                    "name": "amt",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.bitcrusher:setAmountMod(signal)": {
            "signature": "playdate.sound.bitcrusher:setAmountMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.bitcrusher:setUndersampling(amt)": {
            "signature": "playdate.sound.bitcrusher:setUndersampling(amt)",
            "parameters": [
                {
                    "name": "amt",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.bitcrusher:setUndersamplingMod(signal)": {
            "signature": "playdate.sound.bitcrusher:setUndersamplingMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.ringmod.new()": {
            "signature": "playdate.sound.ringmod.new()",
            "parameters": [],
            "returnType": "playdate.sound.ringmod"
        },
        "playdate.sound.ringmod:setMix(level)": {
            "signature": "playdate.sound.ringmod:setMix(level)",
            "parameters": [
                {
                    "name": "level",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.ringmod:setMixMod(signal)": {
            "signature": "playdate.sound.ringmod:setMixMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.ringmod:setFrequency(f)": {
            "signature": "playdate.sound.ringmod:setFrequency(f)",
            "parameters": [
                {
                    "name": "f",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.ringmod:setFrequencyMod(signal)": {
            "signature": "playdate.sound.ringmod:setFrequencyMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.onepolefilter.new()": {
            "signature": "playdate.sound.onepolefilter.new()",
            "parameters": [],
            "returnType": "playdate.sound.onepolefilter"
        },
        "playdate.sound.onepolefilter:setMix(level)": {
            "signature": "playdate.sound.onepolefilter:setMix(level)",
            "parameters": [
                {
                    "name": "level",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.onepolefilter:setMixMod(signal)": {
            "signature": "playdate.sound.onepolefilter:setMixMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.onepolefilter:setParameter(p)": {
            "signature": "playdate.sound.onepolefilter:setParameter(p)",
            "parameters": [
                {
                    "name": "p",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.onepolefilter:setParameterMod(m)": {
            "signature": "playdate.sound.onepolefilter:setParameterMod(m)",
            "parameters": [
                {
                    "name": "m",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.twopolefilter.new(type)": {
            "signature": "playdate.sound.twopolefilter.new(type)",
            "parameters": [
                {
                    "name": "type",
                    "type": "PlaydateSoundTwoPoleFilterType"
                }
            ],
            "returnType": "playdate.sound.twopolefilter"
        },
        "playdate.sound.twopolefilter:setMix(level)": {
            "signature": "playdate.sound.twopolefilter:setMix(level)",
            "parameters": [
                {
                    "name": "level",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.twopolefilter:setMixMod(signal)": {
            "signature": "playdate.sound.twopolefilter:setMixMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.twopolefilter:setFrequency(f)": {
            "signature": "playdate.sound.twopolefilter:setFrequency(f)",
            "parameters": [
                {
                    "name": "f",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.twopolefilter:setFrequencyMod(signal)": {
            "signature": "playdate.sound.twopolefilter:setFrequencyMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.twopolefilter:setResonance(r)": {
            "signature": "playdate.sound.twopolefilter:setResonance(r)",
            "parameters": [
                {
                    "name": "r",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.twopolefilter:setResonanceMod(signal)": {
            "signature": "playdate.sound.twopolefilter:setResonanceMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.twopolefilter:setGain(g)": {
            "signature": "playdate.sound.twopolefilter:setGain(g)",
            "parameters": [
                {
                    "name": "g",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.twopolefilter:setType(type)": {
            "signature": "playdate.sound.twopolefilter:setType(type)",
            "parameters": [
                {
                    "name": "type",
                    "type": "PlaydateSoundTwoPoleFilterType"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.overdrive.new()": {
            "signature": "playdate.sound.overdrive.new()",
            "parameters": [],
            "returnType": "playdate.sound.overdrive"
        },
        "playdate.sound.overdrive:setMix(level)": {
            "signature": "playdate.sound.overdrive:setMix(level)",
            "parameters": [
                {
                    "name": "level",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.overdrive:setMixMod(signal)": {
            "signature": "playdate.sound.overdrive:setMixMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.overdrive:setGain(level)": {
            "signature": "playdate.sound.overdrive:setGain(level)",
            "parameters": [
                {
                    "name": "level",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.overdrive:setLimit(level)": {
            "signature": "playdate.sound.overdrive:setLimit(level)",
            "parameters": [
                {
                    "name": "level",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.overdrive:setLimitMod(signal)": {
            "signature": "playdate.sound.overdrive:setLimitMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.overdrive:setOffset(level)": {
            "signature": "playdate.sound.overdrive:setOffset(level)",
            "parameters": [
                {
                    "name": "level",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.overdrive:setOffsetMod(signal)": {
            "signature": "playdate.sound.overdrive:setOffsetMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.delayline.new(length)": {
            "signature": "playdate.sound.delayline.new(length)",
            "parameters": [
                {
                    "name": "length",
                    "type": "number"
                }
            ],
            "returnType": "playdate.sound.delayline"
        },
        "playdate.sound.delayline:setMix(level)": {
            "signature": "playdate.sound.delayline:setMix(level)",
            "parameters": [
                {
                    "name": "level",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.delayline:setMixMod(signal)": {
            "signature": "playdate.sound.delayline:setMixMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.delayline:addTap(delay)": {
            "signature": "playdate.sound.delayline:addTap(delay)",
            "parameters": [
                {
                    "name": "delay",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.delayline:setFeedback(level)": {
            "signature": "playdate.sound.delayline:setFeedback(level)",
            "parameters": [
                {
                    "name": "level",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.delaylinetap:setDelay(time)": {
            "signature": "playdate.sound.delaylinetap:setDelay(time)",
            "parameters": [
                {
                    "name": "time",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.delaylinetap:setDelayMod(signal)": {
            "signature": "playdate.sound.delaylinetap:setDelayMod(signal)",
            "parameters": [
                {
                    "name": "signal",
                    "type": "playdate.sound.signal | null"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.delaylinetap:setVolume(level)": {
            "signature": "playdate.sound.delaylinetap:setVolume(level)",
            "parameters": [
                {
                    "name": "level",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.delaylinetap:getVolume()": {
            "signature": "playdate.sound.delaylinetap:getVolume()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.delaylinetap:setFlipChannels(flag)": {
            "signature": "playdate.sound.delaylinetap:setFlipChannels(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sequence.new([midi_path])": {
            "signature": "playdate.sound.sequence.new([midi_path])",
            "parameters": [
                {
                    "name": "midi_path",
                    "type": "string"
                }
            ],
            "returnType": "playdate.sound.sequence"
        },
        "playdate.sound.sequence:play([finishCallback])": {
            "signature": "playdate.sound.sequence:play([finishCallback])",
            "parameters": [
                {
                    "name": "finishCallback",
                    "type": "(sequence: playdate.sound.sequence) => void"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sequence:stop()": {
            "signature": "playdate.sound.sequence:stop()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.sequence:isPlaying()": {
            "signature": "playdate.sound.sequence:isPlaying()",
            "parameters": [],
            "returnType": "boolean"
        },
        "playdate.sound.sequence:getLength()": {
            "signature": "playdate.sound.sequence:getLength()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.sequence:goToStep(step, [play])": {
            "signature": "playdate.sound.sequence:goToStep(step, [play])",
            "parameters": [
                {
                    "name": "step",
                    "type": "number"
                },
                {
                    "name": "play",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sequence:getCurrentStep()": {
            "signature": "playdate.sound.sequence:getCurrentStep()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.sequence:setTempo(stepsPerSecond)": {
            "signature": "playdate.sound.sequence:setTempo(stepsPerSecond)",
            "parameters": [
                {
                    "name": "stepsPerSecond",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sequence:getTempo()": {
            "signature": "playdate.sound.sequence:getTempo()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.sequence:setLoops(startStep, endStep, [loopCount])": {
            "signature": "playdate.sound.sequence:setLoops(startStep, endStep, [loopCount])",
            "parameters": [
                {
                    "name": "startStep",
                    "type": "number"
                },
                {
                    "name": "endStep",
                    "type": "number"
                },
                {
                    "name": "loopCount",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sequence:setLoops(loopCount)": {
            "signature": "playdate.sound.sequence:setLoops(loopCount)",
            "parameters": [
                {
                    "name": "loopCount",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sequence:getTrackCount()": {
            "signature": "playdate.sound.sequence:getTrackCount()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.sequence:addTrack([track])": {
            "signature": "playdate.sound.sequence:addTrack([track])",
            "overrideOptions": {
                "overloads": [
                    {
                        "parameters": [],
                        "returnType": "playdate.sound.track"
                    }
                ]
            },
            "parameters": [
                {
                    "name": "track",
                    "type": "playdate.sound.track"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sequence:setTrackAtIndex(n, track)": {
            "signature": "playdate.sound.sequence:setTrackAtIndex(n, track)",
            "parameters": [
                {
                    "name": "n",
                    "type": "number"
                },
                {
                    "name": "track",
                    "type": "playdate.sound.track"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.sequence:getTrackAtIndex(n)": {
            "signature": "playdate.sound.sequence:getTrackAtIndex(n)",
            "parameters": [
                {
                    "name": "n",
                    "type": "number"
                }
            ],
            "returnType": "playdate.sound.track"
        },
        "playdate.sound.sequence:allNotesOff()": {
            "signature": "playdate.sound.sequence:allNotesOff()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.track.new()": {
            "signature": "playdate.sound.track.new()",
            "parameters": [],
            "returnType": "playdate.sound.track"
        },
        "playdate.sound.track:addNote(step, note, length, [velocity])": {
            "signature": "playdate.sound.track:addNote(step, note, length, [velocity])",
            "parameters": [
                {
                    "name": "step",
                    "type": "number"
                },
                {
                    "name": "note",
                    "type": "number | string"
                },
                {
                    "name": "length",
                    "type": "number"
                },
                {
                    "name": "velocity",
                    "type": "number",
                    "overrideOptions": {
                        "initializer": "1"
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.track:addNote(table)": {
            "signature": "playdate.sound.track:addNote(table)",
            "parameters": [
                {
                    "name": "table",
                    "type": "{ step: number; note: number | string; length: number; velocity: number; }"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.track:setNotes(list)": {
            "signature": "playdate.sound.track:setNotes(list)",
            "parameters": [
                {
                    "name": "list",
                    "type": "{ step: number; note: number | string; length: number; velocity: number; }[]"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.track:getNotes([step], [endstep])": {
            "signature": "playdate.sound.track:getNotes([step], [endstep])",
            "parameters": [
                {
                    "name": "step",
                    "type": "number"
                },
                {
                    "name": "endstep",
                    "type": "number"
                }
            ],
            "returnType": "{ step: number; note: number | string; length: number; velocity: number; }[]"
        },
        "playdate.sound.track:removeNote(step, note)": {
            "signature": "playdate.sound.track:removeNote(step, note)",
            "parameters": [
                {
                    "name": "step",
                    "type": "number"
                },
                {
                    "name": "note",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.track:clearNotes()": {
            "signature": "playdate.sound.track:clearNotes()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.track:getLength()": {
            "signature": "playdate.sound.track:getLength()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.track:getNotesActive()": {
            "signature": "playdate.sound.track:getNotesActive()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.track:getPolyphony()": {
            "signature": "playdate.sound.track:getPolyphony()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.track:setInstrument(inst)": {
            "signature": "playdate.sound.track:setInstrument(inst)",
            "parameters": [
                {
                    "name": "inst",
                    "type": "playdate.sound.instrument | playdate.sound.synth"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.track:getInstrument()": {
            "signature": "playdate.sound.track:getInstrument()",
            "parameters": [],
            "returnType": "playdate.sound.instrument"
        },
        "playdate.sound.track:setMuted(flag)": {
            "signature": "playdate.sound.track:setMuted(flag)",
            "parameters": [
                {
                    "name": "flag",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.track:addControlSignal(s)": {
            "signature": "playdate.sound.track:addControlSignal(s)",
            "parameters": [
                {
                    "name": "s",
                    "type": "playdate.sound.controlsignal"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.track:getControlSignals()": {
            "signature": "playdate.sound.track:getControlSignals()",
            "parameters": [],
            "returnType": "playdate.sound.controlsignal[]"
        },
        "playdate.sound.instrument.new([synth])": {
            "signature": "playdate.sound.instrument.new([synth])",
            "parameters": [
                {
                    "name": "synth",
                    "type": "playdate.sound.synth"
                }
            ],
            "returnType": "playdate.sound.instrument"
        },
        "playdate.sound.instrument:addVoice(v, [note], [rangeend], [transpose])": {
            "signature": "playdate.sound.instrument:addVoice(v, [note], [rangeend], [transpose])",
            "parameters": [
                {
                    "name": "v",
                    "type": "playdate.sound.synth"
                },
                {
                    "name": "note",
                    "type": "number | string"
                },
                {
                    "name": "rangeend",
                    "type": "number | string"
                },
                {
                    "name": "transpose",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.instrument:setPitchBend(amount)": {
            "signature": "playdate.sound.instrument:setPitchBend(amount)",
            "parameters": [
                {
                    "name": "amount",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.instrument:setPitchBendRange(halfsteps)": {
            "signature": "playdate.sound.instrument:setPitchBendRange(halfsteps)",
            "parameters": [
                {
                    "name": "halfsteps",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.instrument:setTranspose(halfsteps)": {
            "signature": "playdate.sound.instrument:setTranspose(halfsteps)",
            "parameters": [
                {
                    "name": "halfsteps",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.instrument:playNote(frequency, [vel], [length], [when])": {
            "signature": "playdate.sound.instrument:playNote(frequency, [vel], [length], [when])",
            "parameters": [
                {
                    "name": "frequency",
                    "type": "number | string"
                },
                {
                    "name": "vel",
                    "type": "number",
                    "overrideOptions": {
                        "initializer": "1.0"
                    }
                },
                {
                    "name": "length",
                    "type": "number"
                },
                {
                    "name": "when",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.instrument:playMIDINote(note, [vel], [length], [when])": {
            "signature": "playdate.sound.instrument:playMIDINote(note, [vel], [length], [when])",
            "parameters": [
                {
                    "name": "note",
                    "type": "number"
                },
                {
                    "name": "vel",
                    "type": "number",
                    "overrideOptions": {
                        "initializer": "1.0"
                    }
                },
                {
                    "name": "length",
                    "type": "number"
                },
                {
                    "name": "when",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.instrument:noteOff(note, [when])": {
            "signature": "playdate.sound.instrument:noteOff(note, [when])",
            "parameters": [
                {
                    "name": "note",
                    "type": "number"
                },
                {
                    "name": "when",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.instrument:allNotesOff()": {
            "signature": "playdate.sound.instrument:allNotesOff()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.instrument:setVolume(left, [right])": {
            "signature": "playdate.sound.instrument:setVolume(left, [right])",
            "parameters": [
                {
                    "name": "left",
                    "type": "number"
                },
                {
                    "name": "right",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.instrument:getVolume()": {
            "signature": "playdate.sound.instrument:getVolume()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, undefined]> | LuaMultiReturn<[number, number]>"
        },
        "playdate.sound.controlsignal.new()": {
            "signature": "playdate.sound.controlsignal.new()",
            "parameters": [],
            "returnType": "playdate.sound.controlsignal"
        },
        "playdate.sound.controlsignal:addEvent(step, value, [interpolate])": {
            "signature": "playdate.sound.controlsignal:addEvent(step, value, [interpolate])",
            "parameters": [
                {
                    "name": "step",
                    "type": "number"
                },
                {
                    "name": "value",
                    "type": "number"
                },
                {
                    "name": "interpolate",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.controlsignal:addEvent(event)": {
            "signature": "playdate.sound.controlsignal:addEvent(event)",
            "parameters": [
                {
                    "name": "event",
                    "type": "{ step: number; value: number; interpolate?: boolean; }"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.controlsignal:clearEvents()": {
            "signature": "playdate.sound.controlsignal:clearEvents()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.controlsignal:setControllerType(number)": {
            "signature": "playdate.sound.controlsignal:setControllerType(number)",
            "parameters": [
                {
                    "name": "number",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.sound.controlsignal:getControllerType()": {
            "signature": "playdate.sound.controlsignal:getControllerType()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.controlsignal:getValue()": {
            "signature": "playdate.sound.controlsignal:getValue()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.micinput.recordToSample(buffer, completionCallback)": {
            "signature": "playdate.sound.micinput.recordToSample(buffer, completionCallback)",
            "parameters": [
                {
                    "name": "buffer",
                    "type": "playdate.sound.sample"
                },
                {
                    "name": "completionCallback",
                    "type": "(sample: playdate.sound.sample) => void"
                }
            ],
            "returnType": "boolean"
        },
        "playdate.sound.micinput.stopRecording()": {
            "signature": "playdate.sound.micinput.stopRecording()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.micinput.startListening([source])": {
            "signature": "playdate.sound.micinput.startListening([source])",
            "parameters": [
                {
                    "name": "source",
                    "type": "'headset' | 'device'"
                }
            ],
            "returnType": "LuaMultiReturn<[true, 'headset' | 'device']> | LuaMultiReturn<[false, string]>"
        },
        "playdate.sound.micinput.stopListening()": {
            "signature": "playdate.sound.micinput.stopListening()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.sound.micinput.getLevel()": {
            "signature": "playdate.sound.micinput.getLevel()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.sound.micinput.getSource()": {
            "signature": "playdate.sound.micinput.getSource()",
            "parameters": [],
            "returnType": "'headset' | 'device'"
        },
        "playdate.string.UUID(length)": {
            "signature": "playdate.string.UUID(length)",
            "parameters": [
                {
                    "name": "length",
                    "type": "number"
                }
            ],
            "returnType": "string"
        },
        "playdate.string.trimWhitespace(string)": {
            "signature": "playdate.string.trimWhitespace(string)",
            "parameters": [
                {
                    "name": "string",
                    "type": "string"
                }
            ],
            "returnType": "string"
        },
        "playdate.string.trimLeadingWhitespace(string)": {
            "signature": "playdate.string.trimLeadingWhitespace(string)",
            "parameters": [
                {
                    "name": "string",
                    "type": "string"
                }
            ],
            "returnType": "string"
        },
        "playdate.string.trimTrailingWhitespace(string)": {
            "signature": "playdate.string.trimTrailingWhitespace(string)",
            "parameters": [
                {
                    "name": "string",
                    "type": "string"
                }
            ],
            "returnType": "string"
        },
        "playdate.timer.updateTimers()": {
            "signature": "playdate.timer.updateTimers()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.timer.new(duration, callback, ...)": {
            "signature": "playdate.timer.new(duration, callback, ...)",
            "overrideOptions": {
                "overloads": [
                    {
                        "parameters": [
                            {
                                "name": "duration",
                                "type": "number"
                            },
                            {
                                "name": "callback",
                                "type": "(timer: playdate.timer) => void"
                            }
                        ],
                        "returnType": "playdate.timer"
                    }
                ]
            },
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "duration",
                    "type": "number"
                },
                {
                    "name": "callback",
                    "type": "(...args: unknown[]) => void"
                },
                {
                    "name": "args",
                    "type": "unknown[]",
                    "overrideOptions": {
                        "isRestParameter": true
                    }
                }
            ],
            "returnType": "playdate.timer"
        },
        "playdate.timer.performAfterDelay(delay, callback, ...)": {
            "signature": "playdate.timer.performAfterDelay(delay, callback, ...)",
            "overrideOptions": {
                "overloads": [
                    {
                        "parameters": [
                            {
                                "name": "delay",
                                "type": "number"
                            },
                            {
                                "name": "callback",
                                "type": "(timer: playdate.timer) => void"
                            }
                        ],
                        "returnType": "void"
                    }
                ]
            },
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "delay",
                    "type": "number"
                },
                {
                    "name": "callback",
                    "type": "(...args: unknown[]) => void"
                },
                {
                    "name": "args",
                    "type": "unknown[]",
                    "overrideOptions": {
                        "isRestParameter": true
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.timer.new(duration, [startValue, endValue, [easingFunction]])": {
            "signature": "playdate.timer.new(duration, [startValue, endValue, [easingFunction]])",
            "parameters": [
                {
                    "name": "duration",
                    "type": "number"
                },
                {
                    "name": "startValue",
                    "type": "number",
                    "overrideOptions": {
                        "initializer": "0"
                    }
                },
                {
                    "name": "endValue",
                    "type": "number",
                    "overrideOptions": {
                        "initializer": "0"
                    }
                },
                {
                    "name": "easingFunction",
                    "type": "PlaydateEasingFunction"
                }
            ],
            "returnType": "playdate.timer"
        },
        "playdate.timer.keyRepeatTimer(callback, ...)": {
            "signature": "playdate.timer.keyRepeatTimer(callback, ...)",
            "overrideOptions": {
                "overloads": [
                    {
                        "parameters": [
                            {
                                "name": "callback",
                                "type": "(timer: playdate.timer) => void"
                            }
                        ],
                        "returnType": "void"
                    }
                ]
            },
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "callback",
                    "type": "(...args: unknown[]) => void"
                },
                {
                    "name": "args",
                    "type": "unknown[]",
                    "overrideOptions": {
                        "isRestParameter": true
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.timer.keyRepeatTimerWithDelay(delayAfterInitialFiring, delayAfterSecondFiring, callback, ...)": {
            "signature": "playdate.timer.keyRepeatTimerWithDelay(delayAfterInitialFiring, delayAfterSecondFiring, callback, ...)",
            "overrideOptions": {
                "overloads": [
                    {
                        "parameters": [
                            {
                                "name": "delayAfterInitialFiring",
                                "type": "number"
                            },
                            {
                                "name": "delayAfterSecondFiring",
                                "type": "number"
                            },
                            {
                                "name": "callback",
                                "type": "(timer: playdate.timer) => void"
                            }
                        ],
                        "returnType": "void"
                    }
                ]
            },
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "delayAfterInitialFiring",
                    "type": "number"
                },
                {
                    "name": "delayAfterSecondFiring",
                    "type": "number"
                },
                {
                    "name": "callback",
                    "type": "(...args: unknown[]) => void"
                },
                {
                    "name": "args",
                    "type": "unknown[]",
                    "overrideOptions": {
                        "isRestParameter": true
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.timer.allTimers()": {
            "signature": "playdate.timer.allTimers()",
            "parameters": [],
            "returnType": "playdate.timer[]"
        },
        "playdate.timer:pause()": {
            "signature": "playdate.timer:pause()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.timer:start()": {
            "signature": "playdate.timer:start()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.timer:remove()": {
            "signature": "playdate.timer:remove()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.timer:reset()": {
            "signature": "playdate.timer:reset()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.timer.timerEndedCallback": {
            "signature": "playdate.timer.timerEndedCallback",
            "overrideParameters": true,
            "overrideOptions": {
                "overloads": [
                    {
                        "parameters": [
                            {
                                "name": "args",
                                "type": "unknown[]",
                                "isRestParameter": true
                            }
                        ],
                        "returnType": "void"
                    }
                ]
            },
            "parameters": [
                {
                    "name": "timer",
                    "type": "playdate.timer"
                }
            ],
            "returnType": "void"
        },
        "playdate.timer.updateCallback": {
            "signature": "playdate.timer.updateCallback",
            "overrideParameters": true,
            "overrideOptions": {
                "overloads": [
                    {
                        "parameters": [
                            {
                                "name": "args",
                                "type": "unknown[]",
                                "isRestParameter": true
                            }
                        ],
                        "returnType": "void"
                    }
                ]
            },
            "parameters": [
                {
                    "name": "timer",
                    "type": "playdate.timer"
                }
            ],
            "returnType": "void"
        },
        "playdate.frameTimer.updateTimers()": {
            "signature": "playdate.frameTimer.updateTimers()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.frameTimer.new(duration, callback, ...)": {
            "signature": "playdate.frameTimer.new(duration, callback, ...)",
            "overrideOptions": {
                "overloads": [
                    {
                        "parameters": [
                            {
                                "name": "duration",
                                "type": "number"
                            },
                            {
                                "name": "callback",
                                "type": "(timer: playdate.frametimer) => void"
                            }
                        ],
                        "returnType": "void"
                    }
                ]
            },
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "duration",
                    "type": "number"
                },
                {
                    "name": "callback",
                    "type": "(...args: unknown[]) => void"
                },
                {
                    "name": "args",
                    "type": "unknown[]",
                    "overrideOptions": {
                        "isRestParameter": true
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.frameTimer.performAfterDelay(delay, callback, ...)": {
            "signature": "playdate.frameTimer.performAfterDelay(delay, callback, ...)",
            "overrideOptions": {
                "overloads": [
                    {
                        "parameters": [
                            {
                                "name": "delay",
                                "type": "number"
                            },
                            {
                                "name": "callback",
                                "type": "(timer: playdate.timer) => void"
                            }
                        ],
                        "returnType": "void"
                    }
                ]
            },
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "delay",
                    "type": "number"
                },
                {
                    "name": "callback",
                    "type": "(...args: unknown[]) => void"
                },
                {
                    "name": "args",
                    "type": "unknown[]",
                    "overrideOptions": {
                        "isRestParameter": true
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.frameTimer.new(duration, [startValue, endValue, [easingFunction]])": {
            "signature": "playdate.frameTimer.new(duration, [startValue, endValue, [easingFunction]])",
            "parameters": [
                {
                    "name": "duration",
                    "type": "number"
                },
                {
                    "name": "startValue",
                    "type": "number",
                    "overrideOptions": {
                        "initializer": "0"
                    }
                },
                {
                    "name": "endValue",
                    "type": "number",
                    "overrideOptions": {
                        "initializer": "0"
                    }
                },
                {
                    "name": "easingFunction",
                    "type": "PlaydateEasingFunction"
                }
            ],
            "returnType": "playdate.frametimer"
        },
        "playdate.frameTimer.allTimers()": {
            "signature": "playdate.frameTimer.allTimers()",
            "parameters": [],
            "returnType": "playdate.frametimer[]"
        },
        "playdate.frameTimer:pause()": {
            "signature": "playdate.frameTimer:pause()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.frameTimer:start()": {
            "signature": "playdate.frameTimer:start()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.frameTimer:remove()": {
            "signature": "playdate.frameTimer:remove()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.frameTimer:reset()": {
            "signature": "playdate.frameTimer:reset()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.frameTimer.timerEndedCallback": {
            "signature": "playdate.frameTimer.timerEndedCallback",
            "overrideParameters": true,
            "overrideOptions": {
                "overloads": [
                    {
                        "parameters": [
                            {
                                "name": "args",
                                "type": "unknown[]",
                                "isRestParameter": true
                            }
                        ],
                        "returnType": "void"
                    }
                ]
            },
            "parameters": [
                {
                    "name": "timer",
                    "type": "playdate.frametimer"
                }
            ],
            "returnType": "void"
        },
        "playdate.frameTimer.updateCallback": {
            "signature": "playdate.frameTimer.updateCallback",
            "overrideParameters": true,
            "overrideOptions": {
                "overloads": [
                    {
                        "parameters": [
                            {
                                "name": "args",
                                "type": "unknown[]",
                                "isRestParameter": true
                            }
                        ],
                        "returnType": "void"
                    }
                ]
            },
            "parameters": [
                {
                    "name": "timer",
                    "type": "playdate.frametimer"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.crankIndicator:draw([xOffset, yOffset])": {
            "signature": "playdate.ui.crankIndicator:draw([xOffset, yOffset])",
            "parameters": [
                {
                    "name": "xOffset",
                    "type": "number"
                },
                {
                    "name": "yOffset",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.crankIndicator:resetAnimation()": {
            "signature": "playdate.ui.crankIndicator:resetAnimation()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.ui.crankIndicator:getBounds()": {
            "signature": "playdate.ui.crankIndicator:getBounds()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number, number, number]>"
        },
        "playdate.ui.gridview.new(cellWidth, cellHeight)": {
            "signature": "playdate.ui.gridview.new(cellWidth, cellHeight)",
            "parameters": [
                {
                    "name": "cellWidth",
                    "type": "number"
                },
                {
                    "name": "cellHeight",
                    "type": "number"
                }
            ],
            "returnType": "playdate.ui.gridview"
        },
        "playdate.ui.gridview.getSectionHeaderHeight()": {
            "signature": "playdate.ui.gridview.getSectionHeaderHeight()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.ui.gridview:drawCell(section, row, column, selected, x, y, width, height)": {
            "signature": "playdate.ui.gridview:drawCell(section, row, column, selected, x, y, width, height)",
            "parameters": [
                {
                    "name": "section",
                    "type": "number"
                },
                {
                    "name": "row",
                    "type": "number"
                },
                {
                    "name": "column",
                    "type": "number"
                },
                {
                    "name": "selected",
                    "type": "boolean"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:drawSectionHeader(section, x, y, width, height)": {
            "signature": "playdate.ui.gridview:drawSectionHeader(section, x, y, width, height)",
            "parameters": [
                {
                    "name": "section",
                    "type": "number"
                },
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:drawHorizontalDivider(x, y, width, height)": {
            "signature": "playdate.ui.gridview:drawHorizontalDivider(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:drawInRect(x, y, width, height)": {
            "signature": "playdate.ui.gridview:drawInRect(x, y, width, height)",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "width",
                    "type": "number"
                },
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:setNumberOfSections(num)": {
            "signature": "playdate.ui.gridview:setNumberOfSections(num)",
            "parameters": [
                {
                    "name": "num",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:getNumberOfSections()": {
            "signature": "playdate.ui.gridview:getNumberOfSections()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.ui.gridview:setNumberOfRowsInSection(section, num)": {
            "signature": "playdate.ui.gridview:setNumberOfRowsInSection(section, num)",
            "parameters": [
                {
                    "name": "section",
                    "type": "number"
                },
                {
                    "name": "num",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:getNumberOfRowsInSection(section)": {
            "signature": "playdate.ui.gridview:getNumberOfRowsInSection(section)",
            "parameters": [
                {
                    "name": "section",
                    "type": "number"
                }
            ],
            "returnType": "number"
        },
        "playdate.ui.gridview:setNumberOfColumns(num)": {
            "signature": "playdate.ui.gridview:setNumberOfColumns(num)",
            "parameters": [
                {
                    "name": "num",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:getNumberOfColumns()": {
            "signature": "playdate.ui.gridview:getNumberOfColumns()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.ui.gridview:setNumberOfRows(…​)": {
            "signature": "playdate.ui.gridview:setNumberOfRows(…​)",
            "overrideParameters": true,
            "parameters": [
                {
                    "name": "numbers",
                    "type": "number[]",
                    "overrideOptions": {
                        "isRestParameter": true
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:setCellSize(cellWidth, cellHeight)": {
            "signature": "playdate.ui.gridview:setCellSize(cellWidth, cellHeight)",
            "parameters": [
                {
                    "name": "cellWidth",
                    "type": "number"
                },
                {
                    "name": "cellHeight",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:setCellPadding(left, right, top, bottom)": {
            "signature": "playdate.ui.gridview:setCellPadding(left, right, top, bottom)",
            "parameters": [
                {
                    "name": "left",
                    "type": "number"
                },
                {
                    "name": "right",
                    "type": "number"
                },
                {
                    "name": "top",
                    "type": "number"
                },
                {
                    "name": "bottom",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:setContentInset(left, right, top, bottom)": {
            "signature": "playdate.ui.gridview:setContentInset(left, right, top, bottom)",
            "parameters": [
                {
                    "name": "left",
                    "type": "number"
                },
                {
                    "name": "right",
                    "type": "number"
                },
                {
                    "name": "top",
                    "type": "number"
                },
                {
                    "name": "bottom",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:getCellBounds(section, row, column, [gridWidth])": {
            "signature": "playdate.ui.gridview:getCellBounds(section, row, column, [gridWidth])",
            "parameters": [
                {
                    "name": "section",
                    "type": "number"
                },
                {
                    "name": "row",
                    "type": "number"
                },
                {
                    "name": "column",
                    "type": "number"
                },
                {
                    "name": "gridWidth",
                    "type": "number"
                }
            ],
            "returnType": "LuaMultiReturn<[number, number, number, number]>"
        },
        "playdate.ui.gridview:setSectionHeaderHeight(height)": {
            "signature": "playdate.ui.gridview:setSectionHeaderHeight(height)",
            "parameters": [
                {
                    "name": "height",
                    "type": "number",
                    "overrideOptions": {
                        "initializer": "0"
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:setSectionHeaderPadding(left, right, top, bottom)": {
            "signature": "playdate.ui.gridview:setSectionHeaderPadding(left, right, top, bottom)",
            "parameters": [
                {
                    "name": "left",
                    "type": "number"
                },
                {
                    "name": "right",
                    "type": "number"
                },
                {
                    "name": "top",
                    "type": "number"
                },
                {
                    "name": "bottom",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:setHorizontalDividerHeight(height)": {
            "signature": "playdate.ui.gridview:setHorizontalDividerHeight(height)",
            "parameters": [
                {
                    "name": "height",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:getHorizontalDividerHeight()": {
            "signature": "playdate.ui.gridview:getHorizontalDividerHeight()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.ui.gridview:addHorizontalDividerAbove(section, row)": {
            "signature": "playdate.ui.gridview:addHorizontalDividerAbove(section, row)",
            "parameters": [
                {
                    "name": "section",
                    "type": "number"
                },
                {
                    "name": "row",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:removeHorizontalDividers()": {
            "signature": "playdate.ui.gridview:removeHorizontalDividers()",
            "parameters": [],
            "returnType": "void"
        },
        "playdate.ui.gridview:setScrollDuration(ms)": {
            "signature": "playdate.ui.gridview:setScrollDuration(ms)",
            "parameters": [
                {
                    "name": "ms",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:setScrollPosition(x, y, [animated])": {
            "signature": "playdate.ui.gridview:setScrollPosition(x, y, [animated])",
            "parameters": [
                {
                    "name": "x",
                    "type": "number"
                },
                {
                    "name": "y",
                    "type": "number"
                },
                {
                    "name": "animated",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:getScrollPosition()": {
            "signature": "playdate.ui.gridview:getScrollPosition()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number]>"
        },
        "playdate.ui.gridview:scrollToCell(section, row, column, [animated])": {
            "signature": "playdate.ui.gridview:scrollToCell(section, row, column, [animated])",
            "parameters": [
                {
                    "name": "section",
                    "type": "number"
                },
                {
                    "name": "row",
                    "type": "number"
                },
                {
                    "name": "column",
                    "type": "number"
                },
                {
                    "name": "animated",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:scrollCellToCenter(section, row, column, [animated])": {
            "signature": "playdate.ui.gridview:scrollCellToCenter(section, row, column, [animated])",
            "parameters": [
                {
                    "name": "section",
                    "type": "number"
                },
                {
                    "name": "row",
                    "type": "number"
                },
                {
                    "name": "column",
                    "type": "number"
                },
                {
                    "name": "animated",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:scrollToRow(row, [animated])": {
            "signature": "playdate.ui.gridview:scrollToRow(row, [animated])",
            "parameters": [
                {
                    "name": "row",
                    "type": "number"
                },
                {
                    "name": "animated",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:scrollToTop([animated])": {
            "signature": "playdate.ui.gridview:scrollToTop([animated])",
            "parameters": [
                {
                    "name": "animated",
                    "type": "boolean"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:setSelection(section, row, column)": {
            "signature": "playdate.ui.gridview:setSelection(section, row, column)",
            "parameters": [
                {
                    "name": "section",
                    "type": "number"
                },
                {
                    "name": "row",
                    "type": "number"
                },
                {
                    "name": "column",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:getSelection()": {
            "signature": "playdate.ui.gridview:getSelection()",
            "parameters": [],
            "returnType": "LuaMultiReturn<[number, number, number]>"
        },
        "playdate.ui.gridview:setSelectedRow(row)": {
            "signature": "playdate.ui.gridview:setSelectedRow(row)",
            "parameters": [
                {
                    "name": "row",
                    "type": "number"
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:getSelectedRow()": {
            "signature": "playdate.ui.gridview:getSelectedRow()",
            "parameters": [],
            "returnType": "number"
        },
        "playdate.ui.gridview:selectNextRow(wrapSelection, [scrollToSelection, animate])": {
            "signature": "playdate.ui.gridview:selectNextRow(wrapSelection, [scrollToSelection, animate])",
            "parameters": [
                {
                    "name": "wrapSelection",
                    "type": "boolean"
                },
                {
                    "name": "scrollToSelection",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "true"
                    }
                },
                {
                    "name": "animate",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "true"
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:selectPreviousRow(wrapSelection, [scrollToSelection, animate])": {
            "signature": "playdate.ui.gridview:selectPreviousRow(wrapSelection, [scrollToSelection, animate])",
            "parameters": [
                {
                    "name": "wrapSelection",
                    "type": "boolean"
                },
                {
                    "name": "scrollToSelection",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "true"
                    }
                },
                {
                    "name": "animate",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "true"
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:selectNextColumn(wrapSelection, [scrollToSelection, animate])": {
            "signature": "playdate.ui.gridview:selectNextColumn(wrapSelection, [scrollToSelection, animate])",
            "parameters": [
                {
                    "name": "wrapSelection",
                    "type": "boolean"
                },
                {
                    "name": "scrollToSelection",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "true"
                    }
                },
                {
                    "name": "animate",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "true"
                    }
                }
            ],
            "returnType": "void"
        },
        "playdate.ui.gridview:selectPreviousColumn(wrapSelection, [scrollToSelection, animate])": {
            "signature": "playdate.ui.gridview:selectPreviousColumn(wrapSelection, [scrollToSelection, animate])",
            "parameters": [
                {
                    "name": "wrapSelection",
                    "type": "boolean"
                },
                {
                    "name": "scrollToSelection",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "true"
                    }
                },
                {
                    "name": "animate",
                    "type": "boolean",
                    "overrideOptions": {
                        "initializer": "true"
                    }
                }
            ],
            "returnType": "void"
        },
        "json.decode(string)": {
            "signature": "json.decode(string)",
            "parameters": [
                {
                    "name": "string",
                    "type": "string"
                }
            ],
            "returnType": "AnyTable"
        },
        "json.decodeFile(file)": {
            "signature": "json.decodeFile(file)",
            "parameters": [
                {
                    "name": "file",
                    "type": "playdate.file.file"
                }
            ],
            "returnType": "AnyTable"
        },
        "json.decodeFile(path)": {
            "signature": "json.decodeFile(path)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                }
            ],
            "returnType": "AnyTable"
        },
        "json.encode(table)": {
            "signature": "json.encode(table)",
            "parameters": [
                {
                    "name": "table",
                    "type": "AnyTable"
                }
            ],
            "returnType": "string"
        },
        "json.encodePretty(table)": {
            "signature": "json.encodePretty(table)",
            "parameters": [
                {
                    "name": "table",
                    "type": "AnyTable"
                }
            ],
            "returnType": "string"
        },
        "json.encodeToFile(file, [pretty], table)": {
            "signature": "json.encodeToFile(file, [pretty], table)",
            "parameters": [
                {
                    "name": "file",
                    "type": "playdate.file.file"
                },
                {
                    "name": "pretty",
                    "type": "boolean"
                },
                {
                    "name": "table",
                    "type": "AnyTable"
                }
            ],
            "returnType": "void"
        },
        "json.encodeToFile(path, [pretty], table)": {
            "signature": "json.encodeToFile(path, [pretty], table)",
            "parameters": [
                {
                    "name": "path",
                    "type": "string"
                },
                {
                    "name": "pretty",
                    "type": "boolean"
                },
                {
                    "name": "table",
                    "type": "AnyTable"
                }
            ],
            "returnType": "void"
        }
    }
}
